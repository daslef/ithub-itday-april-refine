"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[72361],{3905:(e,t,a)=>{a.d(t,{Zo:()=>s,kt:()=>k});var n=a(67294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var p=n.createContext({}),d=function(e){var t=n.useContext(p),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},s=function(e){var t=d(e.components);return n.createElement(p.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,p=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),u=d(a),k=r,c=u["".concat(p,".").concat(k)]||u[k]||m[k]||i;return a?n.createElement(c,o(o({ref:t},s),{},{components:a})):n.createElement(c,o({ref:t},s))}));function k(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,o=new Array(i);o[0]=u;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l.mdxType="string"==typeof e?e:r,o[1]=l;for(var d=2;d<i;d++)o[d]=a[d];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}u.displayName="MDXCreateElement"},5590:(e,t,a)=>{a.d(t,{ZP:()=>p});a(67294);var n=a(3905);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){return t=null!=t?t:{},Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):function(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))})),e}function o(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}const l={toc:[]};function p(e){var{components:t}=e,a=o(e,["components"]);return(0,n.kt)("wrapper",i(function(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{},n=Object.keys(a);"function"==typeof Object.getOwnPropertySymbols&&(n=n.concat(Object.getOwnPropertySymbols(a).filter((function(e){return Object.getOwnPropertyDescriptor(a,e).enumerable})))),n.forEach((function(t){r(e,t,a[t])}))}return e}({},l,a),{components:t,mdxType:"MDXLayout"}),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Refine")," supports many data providers. To include them in your project, you can use ",(0,n.kt)("inlineCode",{parentName:"p"},"npm install [packageName]")," or you can select the preferred data provider with the ",(0,n.kt)("inlineCode",{parentName:"p"},"npm create refine-app@latest projectName")," during the project creation phase with CLI. This will allow you to easily use these data providers in your project."),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"/docs/data/packages/simple-rest"},"Simple REST API")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"/docs/data/packages/graphql"},"GraphQL")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"/docs/data/packages/nestjsx-crud"},"NestJS CRUD")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"/docs/data/packages/nestjs-query"},"Nestjs-Query")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"/docs/data/packages/airtable"},"Airtable")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://github.com/refinedev/refine/tree/master/packages/strapi"},"Strapi")," - ",(0,n.kt)("a",{parentName:"li",href:"/docs/data/packages/strapi-v4"},"Strapi v4")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"/docs/data/packages/supabase"},"Supabase")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"/docs/data/packages/hasura"},"Hasura")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"/docs/data/packages/appwrite"},"Appwrite")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://github.com/refinedev/refine/tree/master/packages/medusa"},"Medusa"))),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Community \u2764\ufe0f")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://github.com/resulturan/refine-firebase"},"Firebase")," by ",(0,n.kt)("a",{parentName:"li",href:"https://github.com/resulturan"},"rturan29")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://github.com/tspvivek/refine-directus"},"Directus")," by ",(0,n.kt)("a",{parentName:"li",href:"https://github.com/tspvivek"},"tspvivek")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://github.com/chirdeeptomar/refine-elide-rest"},"Elide")," by ",(0,n.kt)("a",{parentName:"li",href:"https://github.com/chirdeeptomar"},"chirdeeptomar")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://github.com/chirdeeptomar/refine-elide-graphql"},"Elide GraphQL")," by ",(0,n.kt)("a",{parentName:"li",href:"https://github.com/chirdeeptomar"},"chirdeeptomar")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://github.com/usegen/refine-use-generated"},"useGenerated")," by ",(0,n.kt)("a",{parentName:"li",href:"https://github.com/usegen"},"usegen")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://hygraph.com/"},"Hygraph")," by ",(0,n.kt)("a",{parentName:"li",href:"https://github.com/acomagu/refine-hygraph"},"acomagu")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://www.sanity.io"},"Sanity")," by ",(0,n.kt)("a",{parentName:"li",href:"https://github.com/hirenf14/refine-sanity"},"hirenf14")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://www.sqlite.org/index.html"},"SQLite")," by ",(0,n.kt)("a",{parentName:"li",href:"https://github.com/mateusabelli/refine-sqlite"},"mateusabelli")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://jsonapi.org/"},"JSON:API")," by ",(0,n.kt)("a",{parentName:"li",href:"https://github.com/MahirMahdi/refine-jsonapi"},"mahirmahdi")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://pocketbase.io/"},"PocketBase")," by ",(0,n.kt)("a",{parentName:"li",href:"https://github.com/kruschid"},"kruschid"))),(0,n.kt)("p",null,(0,n.kt)("em",{parentName:"p"},"If you have created a custom data provider and would like to share it with the community, please don't hesitate to get in touch with us. We would be happy to include it on this page for others to use.")))}p.isMDXComponent=!0},12544:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>m,contentTitle:()=>d,default:()=>g,frontMatter:()=>p,metadata:()=>s,toc:()=>u});a(67294);var n=a(3905),r=a(5590);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){return t=null!=t?t:{},Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):function(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))})),e}function l(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}const p={title:"Data Provider"},d=void 0,s={unversionedId:"data/data-provider/index",id:"data/data-provider/index",title:"Data Provider",description:"Data provider acts as a data layer for your app, making HTTP requests and encapsulating how the data is retrieved. The methods of these requests are then consumed by Refine via data hooks.",source:"@site/docs/data/data-provider/index.md",sourceDirName:"data/data-provider",slug:"/data/data-provider/",permalink:"/ithub-itday-april-refine/docs/data/data-provider/",draft:!1,editUrl:"https://github.com/refinedev/refine/tree/master/documentation/docs/data/data-provider/index.md",tags:[],version:"current",frontMatter:{title:"Data Provider"},sidebar:"mainSidebar",previous:{title:"<Refine>",permalink:"/ithub-itday-april-refine/docs/core/refine-component/"},next:{title:"Simple REST",permalink:"/ithub-itday-april-refine/docs/data/packages/simple-rest/"}},m={},u=[{value:"Usage",id:"usage",level:2},{value:"Multiple Data Providers",id:"multiple-data-providers",level:2},{value:"Usage",id:"usage-1",level:3},{value:"Methods",id:"methods",level:2},{value:"getList <PropTag required />",id:"getlist-",level:3},{value:"create <PropTag required/>",id:"create-",level:3},{value:"update <PropTag required />",id:"update-",level:3},{value:"deleteOne <PropTag required />",id:"deleteone-",level:3},{value:"getOne <PropTag required />",id:"getone-",level:3},{value:"getApiUrl <PropTag required />",id:"getapiurl-",level:3},{value:"custom",id:"custom",level:3},{value:"Bulk Actions",id:"bulk-actions",level:2},{value:"getMany",id:"getmany",level:3},{value:"createMany",id:"createmany",level:3},{value:"deleteMany",id:"deletemany",level:3},{value:"updateMany",id:"updatemany",level:3},{value:"Error Format",id:"error-format",level:2},{value:"meta Usage",id:"meta-usage",level:2},{value:"Supported Data Providers",id:"supported-data-providers",level:2},{value:"Supported Hooks",id:"supported-hooks",level:2},{value:"FAQ",id:"faq",level:2},{value:"How can I create a custom data provider?",id:"how-can-i-create-a-custom-data-provider",level:3},{value:"How can I customize existing data providers?",id:"how-can-i-customize-existing-data-providers",level:3},{value:"How I can override a specific method of Data Providers?",id:"how-i-can-override-a-specific-method-of-data-providers",level:3}],k=e=>function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,n.kt)("div",t)},c=k("Image"),h=k("PropTag"),N={toc:u};function g(e){var{components:t}=e,a=l(e,["components"]);return(0,n.kt)("wrapper",o(function(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{},n=Object.keys(a);"function"==typeof Object.getOwnPropertySymbols&&(n=n.concat(Object.getOwnPropertySymbols(a).filter((function(e){return Object.getOwnPropertyDescriptor(a,e).enumerable})))),n.forEach((function(t){i(e,t,a[t])}))}return e}({},N,a),{components:t,mdxType:"MDXLayout"}),(0,n.kt)("p",null,"Data provider acts as a data layer for your app, making HTTP requests and encapsulating how the data is retrieved. The methods of these requests are then consumed by Refine via data hooks."),(0,n.kt)("p",null,"You don\u2019t need to worry about creating data providers from scratch, as Refine offers built-in data provider support for the most popular ",(0,n.kt)("a",{parentName:"p",href:"#supported-data-providers"},"API providers"),"."),(0,n.kt)("admonition",{title:"Good to know",type:"simple"},(0,n.kt)("ul",{parentName:"admonition"},(0,n.kt)("li",{parentName:"ul"},"Data hooks use ",(0,n.kt)("a",{parentName:"li",href:"https://tanstack.com/query"},"TanStack Query")," to manage data fetching, which handles important concerns like caching, invalidation, loading states, etc."),(0,n.kt)("li",{parentName:"ul"},"If you want to create your own data provider, check out the ",(0,n.kt)("a",{parentName:"li",href:"/docs/data/data-provider"},'"Creating a data provider from scratch" tutorial')))),(0,n.kt)(c,{src:"https://refine.ams3.cdn.digitaloceanspaces.com/website/static/img/guides-and-concepts/providers/data-provider/api-consuming-flow.png",mdxType:"Image"}),(0,n.kt)("h2",{id:"usage"},"Usage"),(0,n.kt)("p",null,"To activate the data provider in Refine, we have to pass the ",(0,n.kt)("inlineCode",{parentName:"p"},"dataProvider")," to the ",(0,n.kt)("inlineCode",{parentName:"p"},"<Refine />")," component."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="App.tsx"',title:'"App.tsx"'},'import { Refine } from "@refinedev/core";\n\nimport dataProvider from "./dataProvider";\n\nconst App = () => (\n  <Refine\n    /* ... */\n    dataProvider={dataProvider}\n  />\n);\n')),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"/docs/data/data-provider"},"Refer to the Data Provider tutorial for more information and usage examples \u2192")),(0,n.kt)("h2",{id:"multiple-data-providers"},"Multiple Data Providers"),(0,n.kt)("p",null,"Refine allows you to use multiple data providers in your app. All you need to do is pass key and value pairs to the ",(0,n.kt)("inlineCode",{parentName:"p"},"dataProvider")," prop of the ",(0,n.kt)("inlineCode",{parentName:"p"},"<Refine />")," component. In the pair object, the key corresponds to the data provider name, and the value corresponds to the data provider itself."),(0,n.kt)("p",null,"When defining multiple data providers, ",(0,n.kt)("inlineCode",{parentName:"p"},"default")," key is required for defining the default data provider."),(0,n.kt)("p",null,"Here is an example which uses multiple data providers:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live hideCode url=http://localhost:3000/posts previewHeight=420px",live:!0,hideCode:!0,url:"http://localhost:3000/posts",previewHeight:"420px"},'setInitialRoutes(["/posts"]);\nsetRefineProps({ Sider: () => null });\n\n// visible-block-start\nimport { Refine, useList } from "@refinedev/core";\nimport routerProvider from "@refinedev/react-router-v6";\nimport dataProvider from "@refinedev/simple-rest";\n\nimport { BrowserRouter, Route, Routes } from "react-router-dom";\n\nimport { Collapse, Tag } from "antd";\n\nconst API_URL = "https://api.fake-rest.refine.dev";\nconst FINE_FOODS_API_URL = "https://api.finefoods.refine.dev";\n\ninterface IPost {\n  id: number;\n  title: string;\n  status: "published" | "draft" | "rejected";\n}\n\ninterface IProduct {\n  id: number;\n  name: string;\n  price: number;\n}\n\nconst App = () => {\n  return (\n    <BrowserRouter>\n      <Refine\n        routerProvider={routerProvider}\n        // highlight-start\n        dataProvider={{\n          // `default` is required to determine the default data provider\n          default: dataProvider(API_URL),\n          fineFoods: dataProvider(FINE_FOODS_API_URL),\n        }}\n        // highlight-end\n        resources={[\n          {\n            // highlight-next-line\n            // Refine will use the `default` data provider for this resource\n            name: "posts",\n            list: "/posts",\n          },\n          {\n            name: "products",\n            meta: {\n              // highlight-start\n              // Refine will use the `fineFoods` data provider for this resource\n              dataProviderName: "fineFoods",\n              // highlight-end\n            },\n          },\n        ]}\n      >\n        <Routes>\n          <Route path="/posts" element={<PostList />} />\n        </Routes>\n      </Refine>\n    </BrowserRouter>\n  );\n};\n\nconst PostList = () => {\n  const { data: posts } = useList<IPost>({\n    resource: "posts",\n    // highlight-start\n    // Data provider can be selected through props\n    dataProviderName: "default",\n    // highlight-end\n  });\n  // highlight-start\n  // We\'ve defined the data provider for this resource as "fineFoods" in its config so we don\'t need to pass it here\n  const { data: products } = useList<IProduct>({ resource: "products" });\n  // highlight-end\n\n  console.log({\n    posts,\n    products,\n  });\n\n  return (\n    <Collapse defaultActiveKey={["products"]}>\n      <Collapse.Panel header="Posts" key="posts">\n        {posts?.data.map((post) => (\n          <div\n            key={post.title}\n            style={{\n              display: "flex",\n              flexDirection: "row",\n              gap: "0.5rem",\n              marginBottom: "0.25rem",\n            }}\n          >\n            {post.title}\n            <Tag>{post.status}</Tag>\n          </div>\n        ))}\n      </Collapse.Panel>\n      <Collapse.Panel header="Products" key="products">\n        {products?.data.map((product) => (\n          <div\n            key={product.name}\n            style={{\n              display: "flex",\n              flexDirection: "row",\n              gap: "0.5rem",\n              marginBottom: "0.25rem",\n            }}\n          >\n            {product.name}\n            <Tag>{product.price / 10}</Tag>\n          </div>\n        ))}\n      </Collapse.Panel>\n    </Collapse>\n  );\n};\n// visible-block-end\n\nrender(<App />);\n')),(0,n.kt)("h3",{id:"usage-1"},"Usage"),(0,n.kt)("p",null,"You can pick data providers in two ways:"),(0,n.kt)("p",null,"You can either use the ",(0,n.kt)("inlineCode",{parentName:"p"},"dataProviderName")," prop in data hooks and data-related components/functions:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-tsx"},'useTable({\n  dataProviderName: "example",\n});\n')),(0,n.kt)("p",null,"Or use the ",(0,n.kt)("inlineCode",{parentName:"p"},"meta.dataProviderName")," property in your resource config, which will be the default data provider but can be overridden in data hooks and components:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-tsx"},'const App = () => (\n  <Refine\n    dataProvider={{\n      default: defaultDataProvider,\n      example: exampleDataProvider,\n    }}\n    resources={[\n      {\n        // `default` data provider will be used for this resource\n        name: "posts",\n      },\n      {\n        name: "products",\n        // `exampleDataProvider` data provider will be used for this resource\n        meta: { dataProviderName: "exampleDataProvider" },\n      },\n    ]}\n  />\n);\n')),(0,n.kt)("h2",{id:"methods"},"Methods"),(0,n.kt)("p",null,"Data provider's methods are expected to return a promise, meaning that they are async and can be used to create a data provider.\nRefine consumes these data provider methods using ",(0,n.kt)("a",{parentName:"p",href:"#supported-hooks"},"data hooks"),", which are used for CRUD actions like creating a new record, listing a resource or deleting a record, etc."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-tsx"},'import { DataProvider } from "@refinedev/core";\n\nconst dataProvider: DataProvider = {\n  // required methods\n  getList: ({ resource, pagination, sorters, filters, meta }) => Promise,\n  create: ({ resource, variables, meta }) => Promise,\n  update: ({ resource, id, variables, meta }) => Promise,\n  deleteOne: ({ resource, id, variables, meta }) => Promise,\n  getOne: ({ resource, id, meta }) => Promise,\n  getApiUrl: () => "",\n  // optional methods\n  getMany: ({ resource, ids, meta }) => Promise,\n  createMany: ({ resource, variables, meta }) => Promise,\n  deleteMany: ({ resource, ids, variables, meta }) => Promise,\n  updateMany: ({ resource, ids, variables, meta }) => Promise,\n  custom: ({ url, method, filters, sorters, payload, query, headers, meta }) =>\n    Promise,\n};\n')),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"/docs/data/data-provider"},"Refer to the Data Provider tutorial for more information and usage examples","\u2192")),(0,n.kt)("h3",{id:"getlist-"},"getList ",(0,n.kt)(h,{required:!0,mdxType:"PropTag"})),(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"getList")," method is used to get a list of resources with sorting, filtering, and pagination features.\nIt takes ",(0,n.kt)("inlineCode",{parentName:"p"},"resource"),", ",(0,n.kt)("inlineCode",{parentName:"p"},"sorters"),", ",(0,n.kt)("inlineCode",{parentName:"p"},"pagination"),", and, ",(0,n.kt)("inlineCode",{parentName:"p"},"filters")," as parameters and returns ",(0,n.kt)("inlineCode",{parentName:"p"},"data")," and ",(0,n.kt)("inlineCode",{parentName:"p"},"total"),"."),(0,n.kt)("p",null,"Refine will consume this method using the ",(0,n.kt)("a",{parentName:"p",href:"/docs/data/hooks/use-list"},(0,n.kt)("inlineCode",{parentName:"a"},"useList"))," or ",(0,n.kt)("a",{parentName:"p",href:"/docs/data/hooks/use-infinite-list"},(0,n.kt)("inlineCode",{parentName:"a"},"useInfiniteList"))," data hook."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},"getList: async ({ resource, pagination, sorters, filters, meta }) => {\n  const { current, pageSize, mode } = pagination;\n  const { field, order } = sorters;\n  const { field, operator, value } = filters;\n\n  // You can handle the request according to your API requirements.\n\n  return {\n    data,\n    total,\n  };\n};\n")),(0,n.kt)("admonition",{type:"tip"},(0,n.kt)("p",{parentName:"admonition"},(0,n.kt)("inlineCode",{parentName:"p"},"getList")," can also support cursor-based pagination. Refer to ",(0,n.kt)("a",{parentName:"p",href:"/docs/data/hooks/use-infinite-list#how-to-use-cursor-based-pagination"},"related section in the ",(0,n.kt)("inlineCode",{parentName:"a"},"useInfiniteList")," documentation")," for more information.")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Parameter Types:")),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Name"),(0,n.kt)("th",{parentName:"tr",align:null},"Type"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"resource"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"string"))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"pagination?"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"/docs/core/interface-references#pagination"},(0,n.kt)("inlineCode",{parentName:"a"},"Pagination")))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"sorters?"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"/docs/core/interface-references#crudsorting"},(0,n.kt)("inlineCode",{parentName:"a"},"CrudSorting")))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"filters?"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"/docs/core/interface-references#crudfilters"},(0,n.kt)("inlineCode",{parentName:"a"},"CrudFilters")))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"meta?"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"/docs/core/interface-references#metaquery"},(0,n.kt)("inlineCode",{parentName:"a"},"MetaDataQuery")))))),(0,n.kt)("h3",{id:"create-"},"create ",(0,n.kt)(h,{required:!0,mdxType:"PropTag"})),(0,n.kt)("p",null,"The ",(0,n.kt)("inlineCode",{parentName:"p"},"create")," method creates a new record with the ",(0,n.kt)("inlineCode",{parentName:"p"},"resource")," and ",(0,n.kt)("inlineCode",{parentName:"p"},"variables")," parameters."),(0,n.kt)("p",null,"Refine will consume this method using the ",(0,n.kt)("a",{parentName:"p",href:"/docs/data/hooks/use-create"},(0,n.kt)("inlineCode",{parentName:"a"},"useCreate"))," data hook."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},"create: async ({ resource, variables, meta }) => {\n  // You can handle the request according to your API requirements.\n\n  return {\n    data,\n  };\n};\n")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Parameter Types")),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Name"),(0,n.kt)("th",{parentName:"tr",align:null},"Type"),(0,n.kt)("th",{parentName:"tr",align:null},"Default"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"resource"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"string")),(0,n.kt)("td",{parentName:"tr",align:null})),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"variables"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"TVariables")),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"{}"))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"meta?"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"/docs/core/interface-references#metaquery"},(0,n.kt)("inlineCode",{parentName:"a"},"MetaDataQuery"))),(0,n.kt)("td",{parentName:"tr",align:null})))),(0,n.kt)("blockquote",null,(0,n.kt)("p",{parentName:"blockquote"},(0,n.kt)("inlineCode",{parentName:"p"},"TVariables")," is a user defined type which can be passed to ",(0,n.kt)("a",{parentName:"p",href:"/docs/data/hooks/use-create#type-parameters"},(0,n.kt)("inlineCode",{parentName:"a"},"useCreate"))," to type ",(0,n.kt)("inlineCode",{parentName:"p"},"variables"),".")),(0,n.kt)("h3",{id:"update-"},"update ",(0,n.kt)(h,{required:!0,mdxType:"PropTag"})),(0,n.kt)("p",null,"The ",(0,n.kt)("inlineCode",{parentName:"p"},"update")," method updates the record with the ",(0,n.kt)("inlineCode",{parentName:"p"},"resource"),", ",(0,n.kt)("inlineCode",{parentName:"p"},"id"),", and, ",(0,n.kt)("inlineCode",{parentName:"p"},"variables")," parameters."),(0,n.kt)("p",null,"Refine will consume this method using the ",(0,n.kt)("a",{parentName:"p",href:"/docs/data/hooks/use-update"},(0,n.kt)("inlineCode",{parentName:"a"},"useUpdate"))," data hook."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},"update: async ({ resource, id, variables, meta }) => {\n  // You can handle the request according to your API requirements.\n\n  return {\n    data,\n  };\n};\n")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Parameter Types:")),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Name"),(0,n.kt)("th",{parentName:"tr",align:null},"Type"),(0,n.kt)("th",{parentName:"tr",align:null},"Default"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"resource"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"string")),(0,n.kt)("td",{parentName:"tr",align:null})),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"id"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"/docs/core/interface-references#basekey"},"BaseKey")),(0,n.kt)("td",{parentName:"tr",align:null})),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"variables"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"TVariables")),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"{}"))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"meta?"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"/docs/core/interface-references#metaquery"},(0,n.kt)("inlineCode",{parentName:"a"},"MetaDataQuery"))),(0,n.kt)("td",{parentName:"tr",align:null})))),(0,n.kt)("blockquote",null,(0,n.kt)("p",{parentName:"blockquote"},(0,n.kt)("inlineCode",{parentName:"p"},"TVariables")," is a user defined type which can be passed to ",(0,n.kt)("a",{parentName:"p",href:"/docs/data/hooks/use-update#type-parameters"},(0,n.kt)("inlineCode",{parentName:"a"},"useUpdate"))," to type ",(0,n.kt)("inlineCode",{parentName:"p"},"variables"),".")),(0,n.kt)("h3",{id:"deleteone-"},"deleteOne ",(0,n.kt)(h,{required:!0,mdxType:"PropTag"})),(0,n.kt)("p",null,"The ",(0,n.kt)("inlineCode",{parentName:"p"},"deleteOne")," method delete the record with the ",(0,n.kt)("inlineCode",{parentName:"p"},"resource")," and ",(0,n.kt)("inlineCode",{parentName:"p"},"id")," parameters."),(0,n.kt)("p",null,"Refine will consume this method using the ",(0,n.kt)("a",{parentName:"p",href:"/docs/data/hooks/use-delete"},(0,n.kt)("inlineCode",{parentName:"a"},"useDelete"))," data hook."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},"deleteOne: async ({ resource, id, variables, meta }) => {\n  // You can handle the request according to your API requirements.\n\n  return {\n    data,\n  };\n};\n")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Parameter Types:")),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Name"),(0,n.kt)("th",{parentName:"tr",align:null},"Type"),(0,n.kt)("th",{parentName:"tr",align:null},"Default"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"resource"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"string")),(0,n.kt)("td",{parentName:"tr",align:null})),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"id"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"/docs/core/interface-references#basekey"},"BaseKey")),(0,n.kt)("td",{parentName:"tr",align:null})),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"variables"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"TVariables[]")),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"{}"))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"meta?"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"/docs/core/interface-references#metaquery"},(0,n.kt)("inlineCode",{parentName:"a"},"MetaDataQuery"))),(0,n.kt)("td",{parentName:"tr",align:null})))),(0,n.kt)("blockquote",null,(0,n.kt)("p",{parentName:"blockquote"},(0,n.kt)("inlineCode",{parentName:"p"},"TVariables")," is a user defined type which can be passed to ",(0,n.kt)("a",{parentName:"p",href:"/docs/data/hooks/use-delete"},(0,n.kt)("inlineCode",{parentName:"a"},"useDelete"))," to type ",(0,n.kt)("inlineCode",{parentName:"p"},"variables"),".")),(0,n.kt)("h3",{id:"getone-"},"getOne ",(0,n.kt)(h,{required:!0,mdxType:"PropTag"})),(0,n.kt)("p",null,"The ",(0,n.kt)("inlineCode",{parentName:"p"},"getOne")," method gets the record with the ",(0,n.kt)("inlineCode",{parentName:"p"},"resource")," and ",(0,n.kt)("inlineCode",{parentName:"p"},"id")," parameters."),(0,n.kt)("p",null,"Refine will consume this method using the ",(0,n.kt)("a",{parentName:"p",href:"/docs/data/hooks/use-one"},(0,n.kt)("inlineCode",{parentName:"a"},"useOne"))," data hook."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},"getOne: async ({ resource, id, meta }) => {\n  // You can handle the request according to your API requirements.\n\n  return {\n    data,\n  };\n};\n")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Parameter Types:")),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Name"),(0,n.kt)("th",{parentName:"tr",align:null},"Type"),(0,n.kt)("th",{parentName:"tr",align:null},"Default"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"resource"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"string")),(0,n.kt)("td",{parentName:"tr",align:null})),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"id"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"/docs/core/interface-references#basekey"},"BaseKey")),(0,n.kt)("td",{parentName:"tr",align:null})),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"meta?"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"/docs/core/interface-references#metaquery"},(0,n.kt)("inlineCode",{parentName:"a"},"MetaDataQuery"))),(0,n.kt)("td",{parentName:"tr",align:null})))),(0,n.kt)("h3",{id:"getapiurl-"},"getApiUrl ",(0,n.kt)(h,{required:!0,mdxType:"PropTag"})),(0,n.kt)("p",null,"The ",(0,n.kt)("inlineCode",{parentName:"p"},"getApiUrl")," method returns the ",(0,n.kt)("inlineCode",{parentName:"p"},"apiUrl")," value."),(0,n.kt)("p",null,"Refine will consume this method using the ",(0,n.kt)("a",{parentName:"p",href:"/docs/data/hooks/use-api-url"},(0,n.kt)("inlineCode",{parentName:"a"},"useApiUrl"))," data hook."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/data-provider.ts"',title:'"src/data-provider.ts"'},'import { DataProvider } from "@refinedev/core";\n\nexport const dataProvider = (apiUrl: string): DataProvider => ({\n  getApiUrl: () => apiUrl,\n  // ...\n});\n')),(0,n.kt)("h3",{id:"custom"},"custom"),(0,n.kt)("p",null,"An optional method named ",(0,n.kt)("inlineCode",{parentName:"p"},"custom")," can be added to handle requests with custom parameters like URL, CRUD methods and configurations.\nIt's useful if you have non-standard REST API endpoints or want to make a connection with external resources."),(0,n.kt)("p",null,"Refine will consume this method using the ",(0,n.kt)("a",{parentName:"p",href:"/docs/data/hooks/use-custom"},(0,n.kt)("inlineCode",{parentName:"a"},"useCustom"))," data hook."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},"custom: async ({\n  url,\n  method,\n  filters,\n  sorters,\n  payload,\n  query,\n  headers,\n  meta,\n}) => {\n  // You can handle the request according to your API requirements.\n\n  return {\n    data,\n  };\n};\n")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Parameter Types")),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Name"),(0,n.kt)("th",{parentName:"tr",align:null},"Type"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"url"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"string"))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"method"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"get"),", ",(0,n.kt)("inlineCode",{parentName:"td"},"delete"),", ",(0,n.kt)("inlineCode",{parentName:"td"},"head"),", ",(0,n.kt)("inlineCode",{parentName:"td"},"options"),", ",(0,n.kt)("inlineCode",{parentName:"td"},"post"),", ",(0,n.kt)("inlineCode",{parentName:"td"},"put"),", ",(0,n.kt)("inlineCode",{parentName:"td"},"patch"))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"sorters?"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"/docs/core/interface-references#crudsorting"},(0,n.kt)("inlineCode",{parentName:"a"},"CrudSorting")))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"filters?"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"/docs/core/interface-references#crudfilters"},(0,n.kt)("inlineCode",{parentName:"a"},"CrudFilters")))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"payload?"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"{}"))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"query?"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"{}"))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"headers?"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"{}"))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"meta?"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"/docs/core/interface-references#metaquery"},(0,n.kt)("inlineCode",{parentName:"a"},"MetaDataQuery")))))),(0,n.kt)("h2",{id:"bulk-actions"},"Bulk Actions"),(0,n.kt)("p",null,"Bulk actions are actions that can be performed on multiple items at once to improve speed and efficiency. They are commonly used in admin panels. They can be used for data import and export, and are also atomic, meaning that they are treated as a single unit."),(0,n.kt)("p",null,"If your API supports bulk actions, you can implement them in your data provider."),(0,n.kt)("h3",{id:"getmany"},"getMany"),(0,n.kt)("p",null,"The ",(0,n.kt)("inlineCode",{parentName:"p"},"getMany")," method gets the records with the ",(0,n.kt)("inlineCode",{parentName:"p"},"resource")," and ",(0,n.kt)("inlineCode",{parentName:"p"},"ids")," parameters. This method is optional, and Refine will use the ",(0,n.kt)("a",{parentName:"p",href:"#getone-"},(0,n.kt)("inlineCode",{parentName:"a"},"getOne"))," method to handle multiple requests if you don't implement it."),(0,n.kt)("p",null,"Refine will consume this ",(0,n.kt)("inlineCode",{parentName:"p"},"getMany")," method using the ",(0,n.kt)("a",{parentName:"p",href:"/docs/data/hooks/use-many"},(0,n.kt)("inlineCode",{parentName:"a"},"useMany"))," data hook."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},"getMany: async ({ resource, ids, meta }) => {\n  // You can handle the request according to your API requirements.\n\n  return {\n    data,\n  };\n};\n")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Parameter Types:")),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Name"),(0,n.kt)("th",{parentName:"tr",align:null},"Type"),(0,n.kt)("th",{parentName:"tr",align:null},"Default"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"resource"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"string")),(0,n.kt)("td",{parentName:"tr",align:null})),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"ids"),(0,n.kt)("td",{parentName:"tr",align:null},"[",(0,n.kt)("a",{parentName:"td",href:"/docs/core/interface-references#basekey"},"BaseKey"),"]"),(0,n.kt)("td",{parentName:"tr",align:null})),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"meta?"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"/docs/core/interface-references#metaquery"},(0,n.kt)("inlineCode",{parentName:"a"},"MetaDataQuery"))),(0,n.kt)("td",{parentName:"tr",align:null})))),(0,n.kt)("h3",{id:"createmany"},"createMany"),(0,n.kt)("p",null,"This method allows us to create multiple items in a resource. This method is optional, and Refine will use the ",(0,n.kt)("a",{parentName:"p",href:"#create-"},(0,n.kt)("inlineCode",{parentName:"a"},"create"))," method to handle multiple requests if you don't implement it."),(0,n.kt)("p",null,"Refine will consume this ",(0,n.kt)("inlineCode",{parentName:"p"},"createMany")," method using the ",(0,n.kt)("a",{parentName:"p",href:"/docs/data/hooks/use-create"},(0,n.kt)("inlineCode",{parentName:"a"},"useCreateMany"))," data hook."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},"createMany: async ({ resource, variables, meta }) => {\n  // You can handle the request according to your API requirements.\n\n  return {\n    data,\n  };\n};\n")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Parameter Types:")),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Name"),(0,n.kt)("th",{parentName:"tr",align:null},"Type"),(0,n.kt)("th",{parentName:"tr",align:null},"Default"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"resource"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"string")),(0,n.kt)("td",{parentName:"tr",align:null})),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"variables"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"TVariables[]")),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"{}"))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"meta?"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"/docs/core/interface-references#metaquery"},(0,n.kt)("inlineCode",{parentName:"a"},"MetaDataQuery"))),(0,n.kt)("td",{parentName:"tr",align:null})))),(0,n.kt)("blockquote",null,(0,n.kt)("p",{parentName:"blockquote"},(0,n.kt)("inlineCode",{parentName:"p"},"TVariables")," is a user defined type which can be passed to ",(0,n.kt)("a",{parentName:"p",href:"/docs/data/hooks/use-create"},(0,n.kt)("inlineCode",{parentName:"a"},"useCreateMany"))," to type ",(0,n.kt)("inlineCode",{parentName:"p"},"variables"),".")),(0,n.kt)("h3",{id:"deletemany"},"deleteMany"),(0,n.kt)("p",null,"This method allows us to delete multiple items in a resource. This method is optional, and Refine will use the ",(0,n.kt)("a",{parentName:"p",href:"#deleteone-"},(0,n.kt)("inlineCode",{parentName:"a"},"deleteOne"))," method to handle multiple requests if you don't implement it."),(0,n.kt)("p",null,"Refine will consume this ",(0,n.kt)("inlineCode",{parentName:"p"},"deleteMany")," method using the ",(0,n.kt)("a",{parentName:"p",href:"/docs/data/hooks/use-delete"},(0,n.kt)("inlineCode",{parentName:"a"},"useDeleteMany"))," data hook."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},"deleteMany: async ({ resource, ids, variables, meta }) => {\n  // You can handle the request according to your API requirements.\n\n  return {\n    data,\n  };\n};\n")),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Name"),(0,n.kt)("th",{parentName:"tr",align:null},"Type"),(0,n.kt)("th",{parentName:"tr",align:null},"Default"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"resource"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"string")),(0,n.kt)("td",{parentName:"tr",align:null})),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"ids"),(0,n.kt)("td",{parentName:"tr",align:null},"[",(0,n.kt)("a",{parentName:"td",href:"/docs/core/interface-references#basekey"},"BaseKey"),"]"),(0,n.kt)("td",{parentName:"tr",align:null})),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"variables"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"TVariables[]")),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"{}"))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"meta?"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"/docs/core/interface-references#metaquery"},(0,n.kt)("inlineCode",{parentName:"a"},"MetaDataQuery"))),(0,n.kt)("td",{parentName:"tr",align:null})))),(0,n.kt)("blockquote",null,(0,n.kt)("p",{parentName:"blockquote"},(0,n.kt)("inlineCode",{parentName:"p"},"TVariables")," is a user defined type which can be passed to ",(0,n.kt)("a",{parentName:"p",href:"/docs/data/hooks/use-delete"},(0,n.kt)("inlineCode",{parentName:"a"},"useDeleteMany"))," to type ",(0,n.kt)("inlineCode",{parentName:"p"},"variables"),".")),(0,n.kt)("h3",{id:"updatemany"},"updateMany"),(0,n.kt)("p",null,"This method allows us to update multiple items in a resource. This method is optional, and Refine will use the ",(0,n.kt)("a",{parentName:"p",href:"#update-"},(0,n.kt)("inlineCode",{parentName:"a"},"update"))," method to handle multiple requests if you don't implement it."),(0,n.kt)("p",null,"Refine will consume this ",(0,n.kt)("inlineCode",{parentName:"p"},"updateMany")," method using the ",(0,n.kt)("a",{parentName:"p",href:"/docs/data/hooks/use-update"},(0,n.kt)("inlineCode",{parentName:"a"},"useUpdateMany"))," data hook."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},"updateMany: async ({ resource, ids, variables, meta }) => {\n  // You can handle the request according to your API requirements.\n\n  return {\n    data,\n  };\n};\n")),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Name"),(0,n.kt)("th",{parentName:"tr",align:null},"Type"),(0,n.kt)("th",{parentName:"tr",align:null},"Default"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"resource"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"string")),(0,n.kt)("td",{parentName:"tr",align:null})),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"ids"),(0,n.kt)("td",{parentName:"tr",align:null},"[",(0,n.kt)("a",{parentName:"td",href:"/docs/core/interface-references#basekey"},"BaseKey"),"]"),(0,n.kt)("td",{parentName:"tr",align:null})),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"variables"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"TVariables[]")),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"{}"))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"meta?"),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"/docs/core/interface-references#metaquery"},(0,n.kt)("inlineCode",{parentName:"a"},"MetaDataQuery"))),(0,n.kt)("td",{parentName:"tr",align:null})))),(0,n.kt)("blockquote",null,(0,n.kt)("p",{parentName:"blockquote"},(0,n.kt)("inlineCode",{parentName:"p"},"TVariables")," is a user defined type which can be passed to ",(0,n.kt)("a",{parentName:"p",href:"/docs/data/hooks/use-update"},(0,n.kt)("inlineCode",{parentName:"a"},"useUpdateMany"))," to type ",(0,n.kt)("inlineCode",{parentName:"p"},"variables"),".")),(0,n.kt)("h2",{id:"error-format"},"Error Format"),(0,n.kt)("p",null,"Refine expects errors to be extended from ",(0,n.kt)("a",{parentName:"p",href:"/docs/core/interface-references#httperror"},(0,n.kt)("inlineCode",{parentName:"a"},"HttpError")),"."),(0,n.kt)("p",null,"Here is a basic example of how to implement error handling in your data provider."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/data-provider.ts"',title:'"src/data-provider.ts"'},'import { DataProvider, HttpError } from "@refinedev/core";\n\nexport const dataProvider = (apiUrl: string): DataProvider => ({\n  getOne: async ({ resource, id }) => {\n    try {\n      const response = await fetch(`https://api.example.com/${resource}/${id}`);\n\n      // highlight-start\n      if (!response.ok) {\n        const error: HttpError = {\n          message: response.statusText,\n          statusCode: response.status,\n        };\n        return Promise.reject(error);\n      }\n      // highlight-end\n\n      return {\n        data: response.data,\n      };\n    } catch (error) {\n      // highlight-start\n      const error: HttpError = {\n        message: error?.message || "Something went wrong",\n        statusCode: error?.status || 500,\n      };\n      return Promise.reject(error);\n      // highlight-end\n    }\n  },\n  // ...\n});\n')),(0,n.kt)("p",null,"Also, the Axios interceptor can be used to transform the error from the response before Axios returns the response to your code."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/data-provider.ts"',title:'"src/data-provider.ts"'},'// highlight-start\nimport axios from "axios";\nimport { DataProvider, HttpError } from "@refinedev/core";\n// highlight-end\nimport { stringify } from "query-string";\n\n// highlight-start\n// Error handling with axios interceptors\nconst axiosInstance = axios.create();\n\naxiosInstance.interceptors.response.use(\n  (response) => {\n    return response;\n  },\n  (error) => {\n    const customError: HttpError = {\n      ...error,\n      message: error.response?.data?.message,\n      statusCode: error.response?.status,\n    };\n\n    return Promise.reject(customError);\n  },\n);\n// highlight-end\n\nexport const dataProvider = (apiUrl: string): DataProvider => ({\n  // Methods\n});\n')),(0,n.kt)("h2",{id:"meta-usage"},"meta Usage"),(0,n.kt)("p",null,"When using APIs, you may wish to include custom parameters, such as a custom header. To accomplish this, you can utilize the ",(0,n.kt)("inlineCode",{parentName:"p"},"meta")," field, which allows the sent parameter to be easily accessed by the data provider."),(0,n.kt)("p",null,"Here is an example of how to send a custom header parameter to the ",(0,n.kt)("inlineCode",{parentName:"p"},"getOne")," method using ",(0,n.kt)("inlineCode",{parentName:"p"},"meta"),":"),(0,n.kt)("p",null,"We first need to send a custom header parameter to the ",(0,n.kt)("a",{parentName:"p",href:"#getone-"},(0,n.kt)("inlineCode",{parentName:"a"},"getOne"))," method using ",(0,n.kt)("inlineCode",{parentName:"p"},"meta"),"."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="post/edit.tsx"',title:'"post/edit.tsx"'},'import { useOne } from "@refinedev/core";\n\nuseOne({\n  resource: "post",\n  id: "1",\n  meta: {\n    headers: {\n      "x-custom-header": "hello world",\n    },\n  },\n});\n')),(0,n.kt)("p",null,"Then we can get the ",(0,n.kt)("inlineCode",{parentName:"p"},"meta")," parameter from the data provider:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/data-provider.ts"',title:'"src/data-provider.ts"'},'import { DataProvider } from "@refinedev/core";\n\nexport const dataProvider = (apiUrl: string): DataProvider => ({\n  ...\n  getOne: async ({ resource, id, variables, meta }) => {\n    // highlight-next-line\n    const { headers } = meta;\n    const url = `${apiUrl}/${resource}/${id}`;\n\n    // highlight-start\n    httpClient.defaults.headers = {\n      ...headers,\n    };\n    // highlight-end\n\n    const { data } = await httpClient.get(url, variables);\n\n    return {\n      data,\n    };\n  },\n});\n')),(0,n.kt)("h2",{id:"supported-data-providers"},"Supported Data Providers"),(0,n.kt)(r.ZP,{mdxType:"SupportedDataProviders"}),(0,n.kt)("h2",{id:"supported-hooks"},"Supported Hooks"),(0,n.kt)("p",null,"Refine will consume:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#getlist-"},(0,n.kt)("inlineCode",{parentName:"a"},"getList"))," method using the ",(0,n.kt)("a",{parentName:"li",href:"/docs/data/hooks/use-list"},(0,n.kt)("inlineCode",{parentName:"a"},"useList"))," or ",(0,n.kt)("a",{parentName:"li",href:"/docs/data/hooks/use-infinite-list"},(0,n.kt)("inlineCode",{parentName:"a"},"useInfiniteList"))," data hook."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#create-"},(0,n.kt)("inlineCode",{parentName:"a"},"create"))," method using the ",(0,n.kt)("a",{parentName:"li",href:"/docs/data/hooks/use-create"},(0,n.kt)("inlineCode",{parentName:"a"},"useCreate"))," data hook."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#update-"},(0,n.kt)("inlineCode",{parentName:"a"},"update"))," method using the ",(0,n.kt)("a",{parentName:"li",href:"/docs/data/hooks/use-update"},(0,n.kt)("inlineCode",{parentName:"a"},"useUpdate"))," data hook."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#deleteone-"},(0,n.kt)("inlineCode",{parentName:"a"},"deleteOne"))," method using the ",(0,n.kt)("a",{parentName:"li",href:"/docs/data/hooks/use-delete"},(0,n.kt)("inlineCode",{parentName:"a"},"useDeleteOne"))," data hook."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#getone-"},(0,n.kt)("inlineCode",{parentName:"a"},"getOne"))," method using the ",(0,n.kt)("a",{parentName:"li",href:"/docs/data/hooks/use-one"},(0,n.kt)("inlineCode",{parentName:"a"},"useOne"))," data hook."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#getapiurl-"},(0,n.kt)("inlineCode",{parentName:"a"},"getApiUrl"))," method using the ",(0,n.kt)("a",{parentName:"li",href:"/docs/data/hooks/use-api-url"},(0,n.kt)("inlineCode",{parentName:"a"},"useApiUrl"))," data hook."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#custom"},(0,n.kt)("inlineCode",{parentName:"a"},"custom"))," method using the ",(0,n.kt)("a",{parentName:"li",href:"/docs/data/hooks/use-custom"},(0,n.kt)("inlineCode",{parentName:"a"},"useCustom"))," data hook."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#getmany"},(0,n.kt)("inlineCode",{parentName:"a"},"getMany"))," method using the ",(0,n.kt)("a",{parentName:"li",href:"/docs/data/hooks/use-many"},(0,n.kt)("inlineCode",{parentName:"a"},"useMany"))," data hook."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#createmany"},(0,n.kt)("inlineCode",{parentName:"a"},"createMany"))," method using the ",(0,n.kt)("a",{parentName:"li",href:"/docs/data/hooks/use-create"},(0,n.kt)("inlineCode",{parentName:"a"},"useCreateMany"))," data hook."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#deletemany"},(0,n.kt)("inlineCode",{parentName:"a"},"deleteMany"))," method using the ",(0,n.kt)("a",{parentName:"li",href:"/docs/data/hooks/use-delete"},(0,n.kt)("inlineCode",{parentName:"a"},"useDeleteMany"))," data hook."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#updatemany"},(0,n.kt)("inlineCode",{parentName:"a"},"updateMany"))," method using the ",(0,n.kt)("a",{parentName:"li",href:"/docs/data/hooks/use-update"},(0,n.kt)("inlineCode",{parentName:"a"},"useUpdateMany"))," data hook.")),(0,n.kt)("h2",{id:"faq"},"FAQ"),(0,n.kt)("h3",{id:"how-can-i-create-a-custom-data-provider"},"How can I create a custom data provider?"),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"/docs/data/data-provider"},'Refer to the "Create Data Provider From Scratch" section in the tutorial for more information \u2192')),(0,n.kt)("h3",{id:"how-can-i-customize-existing-data-providers"},"How can I customize existing data providers?"),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"/docs/packages/cli"},'Refer to the "Create Data Provider with Swizzle" section in the tutorial for more information \u2192')),(0,n.kt)("h3",{id:"how-i-can-override-a-specific-method-of-data-providers"},"How I can override a specific method of Data Providers?"),(0,n.kt)("p",null,"In some cases, you may need to override the method of Refine data providers. The simplest way to do this is to use the ",(0,n.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax"},"Spread syntax")),(0,n.kt)("p",null,"For example, Let's override the ",(0,n.kt)("inlineCode",{parentName:"p"},"update")," function of the ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/refinedev/refine/tree/master/packages/simple-rest"},(0,n.kt)("inlineCode",{parentName:"a"},"@refinedev/simple-rest")),". ",(0,n.kt)("inlineCode",{parentName:"p"},"@refinedev/simple-rest")," uses the ",(0,n.kt)("inlineCode",{parentName:"p"},"PATCH")," HTTP method for ",(0,n.kt)("inlineCode",{parentName:"p"},"update"),", let's change it to ",(0,n.kt)("inlineCode",{parentName:"p"},"PUT")," without forking the whole data provider."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-tsx"},'import dataProvider from "@refinedev/simple-rest";\n\nconst simpleRestProvider = dataProvider("API_URL");\nconst myDataProvider = {\n  ...simpleRestProvider,\n  update: async ({ resource, id, variables }) => {\n    const url = `${apiUrl}/${resource}/${id}`;\n\n    const { data } = await httpClient.put(url, variables);\n\n    return {\n      data,\n    };\n  },\n};\n\n<Refine dataProvider={myDataProvider}>{/* ... */}</Refine>;\n')))}g.isMDXComponent=!0}}]);