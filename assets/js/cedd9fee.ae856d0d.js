"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[13355],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>m});var r=t(67294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l=r.createContext({}),c=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},u=function(e){var n=c(e.components);return r.createElement(l.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},p=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),p=c(t),m=a,g=p["".concat(l,".").concat(m)]||p[m]||d[m]||o;return t?r.createElement(g,i(i({ref:n},u),{},{components:t})):r.createElement(g,i({ref:n},u))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,i=new Array(o);i[0]=p;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var c=2;c<o;c++)i[c]=t[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}p.displayName="MDXCreateElement"},70475:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>u,contentTitle:()=>l,default:()=>m,frontMatter:()=>s,metadata:()=>c,toc:()=>d});t(67294);var r=t(3905);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){return n=null!=n?n:{},Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):function(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))})),e}function i(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}const s={title:"Interface References"},l=void 0,c={unversionedId:"core/interface-references/index",id:"core/interface-references/index",title:"Interface References",description:"CrudFilters",source:"@site/docs/core/interface-references/index.md",sourceDirName:"core/interface-references",slug:"/core/interface-references/",permalink:"/ithub-itday-april-refine/docs/core/interface-references/",draft:!1,editUrl:"https://github.com/refinedev/refine/tree/master/documentation/docs/core/interface-references/index.md",tags:[],version:"current",frontMatter:{title:"Interface References"}},u={},d=[{value:"CrudFilters",id:"crudfilters",level:3},{value:"CrudFilter",id:"crudfilter",level:3},{value:"LogicalFilter",id:"logicalfilter",level:3},{value:"ConditionalFilter",id:"conditionalfilter",level:3},{value:"CrudOperators",id:"crudoperators",level:3},{value:"CrudSorting",id:"crudsorting",level:3},{value:"CrudSort",id:"crudsort",level:3},{value:"Pagination",id:"pagination",level:3},{value:"BaseKey",id:"basekey",level:3},{value:"BaseRecord",id:"baserecord",level:3},{value:"HttpError",id:"httperror",level:3},{value:"ValidationErrors",id:"validationerrors",level:3},{value:"MutationMode",id:"mutationmode",level:3},{value:"UseImportInputPropsType",id:"useimportinputpropstype",level:3},{value:"SuccessErrorNotification",id:"successerrornotification",level:3},{value:"OpenNotificationParams",id:"opennotificationparams",level:3},{value:"QueryFunctionContext",id:"queryfunctioncontext",level:3},{value:"QueryBuilderOptions",id:"querybuilderoptions",level:3},{value:"NestedField",id:"nestedfield",level:3},{value:"VariableOptions",id:"variableoptions",level:3},{value:"CanParams",id:"canparams",level:3},{value:"CanResponse",id:"canresponse",level:3},{value:"DataProvider",id:"dataprovider",level:3},{value:"LiveEvent",id:"liveevent",level:3},{value:"LiveModeProps",id:"livemodeprops",level:3},{value:"ResourceProps",id:"resourceprops",level:3},{value:"ResourceMeta",id:"resourcemeta",level:3},{value:"ResourceAuditLogPermissions",id:"resourceauditlogpermissions",level:3},{value:"SyncWithLocationParams",id:"syncwithlocationparams",level:3}],p={toc:d};function m(e){var{components:n}=e,t=i(e,["components"]);return(0,r.kt)("wrapper",o(function(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{},r=Object.keys(t);"function"==typeof Object.getOwnPropertySymbols&&(r=r.concat(Object.getOwnPropertySymbols(t).filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable})))),r.forEach((function(n){a(e,n,t[n])}))}return e}({},p,t),{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h3",{id:"crudfilters"},"CrudFilters"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"type CrudFilters = CrudFilter[];\n")),(0,r.kt)("h3",{id:"crudfilter"},"CrudFilter"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"type CrudFilter = LogicalFilter | ConditionalFilter;\n")),(0,r.kt)("h3",{id:"logicalfilter"},"LogicalFilter"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},'type LogicalFilter = {\n  field: string;\n  operator: Exclude<CrudOperators, "or" | "and">;\n  value: any;\n};\n')),(0,r.kt)("h3",{id:"conditionalfilter"},"ConditionalFilter"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},'type ConditionalFilter = {\n  key?: string;\n  operator: Extract<CrudOperators, "or" | "and">;\n  value: (LogicalFilter | ConditionalFilter)[];\n};\n')),(0,r.kt)("h3",{id:"crudoperators"},"CrudOperators"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},'type CrudOperators =\n  | "eq" // Equal\n  | "ne" // Not equal\n  | "lt" // Less than\n  | "gt" // Greater than\n  | "lte" // Less than or equal to\n  | "gte" // Greater than or equal to\n  | "in" // Included in an array\n  | "nin" // Not included in an array\n  | "contains" // Contains\n  | "ncontains" // Doesn\'t contain\n  | "containss" // Contains, case sensitive\n  | "ncontainss" // Doesn\'t contain, case sensitive\n  | "between" // Between\n  | "nbetween" // Not between\n  | "null" // Is null\n  | "nnull" // Is not null\n  | "startswith" // Starts with\n  | "nstartswith" // Doesn\'t start with\n  | "startswiths" // Starts with, case sensitive\n  | "nstartswiths" // Doesn\'t start with, case sensitive\n  | "endswith" // Ends with\n  | "nendswith" // Doesn\'t end with\n  | "endswiths" // Ends with, case sensitive\n  | "nendswiths" // Doesn\'t end with, case sensitive\n  | "or" // Logical OR\n  | "and"; // Logical AND\n')),(0,r.kt)("h3",{id:"crudsorting"},"CrudSorting"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"type CrudSorting = CrudSort[];\n")),(0,r.kt)("h3",{id:"crudsort"},"CrudSort"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},'type CrudSort = {\n  field: string;\n  order:\n    | "asc" // Ascending order\n    | "desc"; // Descending order\n};\n')),(0,r.kt)("h3",{id:"pagination"},"Pagination"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},'type Pagination = {\n  current?: number; // Initial page index\n  pageSize?: number; // Initial number of items per page\n  mode?: "client" | "server" | "off"; // Whether to use server side pagination or not.\n};\n')),(0,r.kt)("h3",{id:"basekey"},"BaseKey"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"type BaseKey = string | number;\n")),(0,r.kt)("h3",{id:"baserecord"},"BaseRecord"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"type BaseRecord = {\n  id?: BaseKey;\n  [key: string]: any;\n};\n")),(0,r.kt)("h3",{id:"httperror"},"HttpError"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"type HttpError = {\n  message: string;\n  statusCode: number;\n  errors?: ValidationErrors;\n  [key: string]: any;\n};\n")),(0,r.kt)("h3",{id:"validationerrors"},"ValidationErrors"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"type ValidationErrors = {\n  [field: string]:\n    | string // Single error message\n    | string[] // Multiple error messages\n    | boolean // `true` if there is an error\n    | { key: string; message: string }; // Error message with a translation key and a default message\n};\n")),(0,r.kt)("h3",{id:"mutationmode"},"MutationMode"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},'type MutationMode = "pessimistic" | "optimistic" | "undoable";\n')),(0,r.kt)("h3",{id:"useimportinputpropstype"},"UseImportInputPropsType"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},'type UseImportInputPropsType = {\n  type: "file";\n  accept: string; // ".cvs"\n  onChange: (event: React.ChangeEvent<HTMLInputElement>) => void;\n};\n')),(0,r.kt)("h3",{id:"successerrornotification"},"SuccessErrorNotification"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"type SuccessErrorNotification<\n  TData = unknown,\n  TError = unknown,\n  TVariables = unknown,\n> = {\n  successNotification?:\n    | OpenNotificationParams\n    | false\n    | ((\n        data?: TData,\n        values?: TVariables,\n        resource?: string,\n      ) => OpenNotificationParams | false);\n  errorNotification?:\n    | OpenNotificationParams\n    | false\n    | ((\n        error?: TError,\n        values?: TVariables,\n        resource?: string,\n      ) => OpenNotificationParams | false);\n};\n")),(0,r.kt)("h3",{id:"opennotificationparams"},"OpenNotificationParams"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},'type OpenNotificationParams = {\n  key?: string; // The key of the notification, used to manage the notification state.\n  message: string; // The title of the notification.\n  type: "success" | "error" | "progress"; // The type of the notification.\n  description?: string; // The description of the notification.\n  cancelMutation?: () => void; // If the notification is undoable, the function to call when the user clicks on the undo button.\n  undoableTimeout?: number; // If the notification is undoable, the timeout in milliseconds after which the notification will be automatically closed.\n};\n')),(0,r.kt)("h3",{id:"queryfunctioncontext"},"QueryFunctionContext"),(0,r.kt)("p",null,"Context to be passed to the query function. Refer to ",(0,r.kt)("a",{parentName:"p",href:"https://tanstack.com/query/v4/docs/guides/query-functions#queryfunctioncontext"},"Query Function Context")," for more information."),(0,r.kt)("h3",{id:"querybuilderoptions"},"QueryBuilderOptions"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"type QueryBuilderOptions = {\n  operation?: string;\n  fields?: Array<string | object | NestedField>;\n  variables?: VariableOptions;\n};\n")),(0,r.kt)("h3",{id:"nestedfield"},"NestedField"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"type NestedField = {\n  operation: string;\n  variables: QueryBuilderOptions[];\n  fields: Array<string | object | NestedField>;\n};\n")),(0,r.kt)("h3",{id:"variableoptions"},"VariableOptions"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"type VariableOptions = {\n  type?: string;\n  name?: string;\n  value: any;\n  list?: boolean;\n  required?: boolean;\n  [key: string]: any;\n};\n")),(0,r.kt)("h3",{id:"canparams"},"CanParams"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"type CanParams = {\n  resource: string; // Resource name\n  action: string; // Intended action name\n  params?: {\n    resource?: IResourceItem; // Resource item if can be determined\n    id?: BaseKey; // Id of the record if the check is for a specific record\n    [key: string]: unknown;\n  };\n};\n")),(0,r.kt)("h3",{id:"canresponse"},"CanResponse"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"type CanResponse = {\n  can: boolean;\n  reason?: string;\n  [key: string]: unknown;\n};\n")),(0,r.kt)("h3",{id:"dataprovider"},"DataProvider"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"type DataProvider {\n    getList: <TData extends BaseRecord = BaseRecord>(\n        params: GetListParams,\n    ) => Promise<GetListResponse<TData>>;\n\n    getMany?: <TData extends BaseRecord = BaseRecord>(\n        params: GetManyParams,\n    ) => Promise<GetManyResponse<TData>>;\n\n    getOne: <TData extends BaseRecord = BaseRecord>(\n        params: GetOneParams,\n    ) => Promise<GetOneResponse<TData>>;\n\n    create: <TData extends BaseRecord = BaseRecord, TVariables = {}>(\n        params: CreateParams<TVariables>,\n    ) => Promise<CreateResponse<TData>>;\n\n    createMany?: <TData extends BaseRecord = BaseRecord, TVariables = {}>(\n        params: CreateManyParams<TVariables>,\n    ) => Promise<CreateManyResponse<TData>>;\n\n    update: <TData extends BaseRecord = BaseRecord, TVariables = {}>(\n        params: UpdateParams<TVariables>,\n    ) => Promise<UpdateResponse<TData>>;\n\n    updateMany?: <TData extends BaseRecord = BaseRecord, TVariables = {}>(\n        params: UpdateManyParams<TVariables>,\n    ) => Promise<UpdateManyResponse<TData>>;\n\n    deleteOne: <TData extends BaseRecord = BaseRecord, TVariables = {}>(\n        params: DeleteOneParams<TVariables>,\n    ) => Promise<DeleteOneResponse<TData>>;\n\n    deleteMany?: <TData extends BaseRecord = BaseRecord, TVariables = {}>(\n        params: DeleteManyParams<TVariables>,\n    ) => Promise<DeleteManyResponse<TData>>;\n\n    getApiUrl: () => string;\n\n    custom?: <\n        TData extends BaseRecord = BaseRecord,\n        TQuery = unknown,\n        TPayload = unknown,\n    >(\n        params: CustomParams<TQuery, TPayload>,\n    ) => Promise<CustomResponse<TData>>;\n};\n")),(0,r.kt)("h3",{id:"liveevent"},"LiveEvent"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},'type LiveEvent = {\n  channel: string;\n  type: "deleted" | "updated" | "created" | "*" | string;\n  payload: {\n    ids?: BaseKey[];\n    [x: string]: any;\n  };\n  date: Date;\n  meta?: MetaQuery & {\n    dataProviderName?: string;\n  };\n};\n')),(0,r.kt)("h3",{id:"livemodeprops"},"LiveModeProps"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},'type LiveModeProps = {\n  liveMode?: "auto" | "manual" | "off";\n  onLiveEvent?: (event: LiveEvent) => void;\n  liveParams?: {\n    ids?: BaseKey[];\n    [key: string]: any;\n  };\n};\n')),(0,r.kt)("h3",{id:"resourceprops"},"ResourceProps"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"type ResourceProps = {\n  name: string;\n  identifier?: string;\n  meta?: ResourceMeta;\n};\n")),(0,r.kt)("h3",{id:"resourcemeta"},"ResourceMeta"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"type ResourceMeta = {\n  label?: string; // Label of the resource, can be used to pretty print the resource name.\n  hide?: boolean; // Whether to hide the resource from the menus or not. Used by the <Sider /> components.\n  dataProviderName?: string; // Dedicated data provider name for the resource.\n  parent?: string; // To nest a resource under another resource.\n  canDelete?: boolean; // To determine if the resource has ability to delete or not.\n  audit?: ResourceAuditLogPermissions[]; // To permit the audit log for actions on the resource.\n  icon?: ReactNode; // Icon of the resource, used in the menus and breadcrumbs\n  [key: string]: any;\n};\n")),(0,r.kt)("h3",{id:"resourceauditlogpermissions"},"ResourceAuditLogPermissions"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},'type ResourceAuditLogPermissions = "create" | "update" | "delete" | string;\n')),(0,r.kt)("h3",{id:"syncwithlocationparams"},"SyncWithLocationParams"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"type SyncWithLocationParams = {\n  pagination: { current?: number; pageSize?: number };\n  sorters: CrudSorting;\n  filters: CrudFilters;\n};\n")))}m.isMDXComponent=!0}}]);