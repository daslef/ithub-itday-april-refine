"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[83560],{58943:(e,t,n)=>{n.d(t,{x:()=>m});var r=n(86010),a=n(67294),i=n(73808),o=n(96319),s=n(79526);const l=({horizontalSize:e,onMouseDown:t})=>a.createElement("div",{className:(0,r.Z)("resize-handler","hidden","md:block","absolute","z-[3]","top-0","bottom-0","w-2.5","cursor-ew-resize"),"data-direction":"horizontal",onMouseDown:t,style:{left:`calc(${e}% - 5px)`}});function d(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{},r=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(r=r.concat(Object.getOwnPropertySymbols(n).filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable})))),r.forEach((function(t){d(e,t,n[t])}))}return e}function p(e,t){return t=null!=t?t:{},Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):function(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))})),e}function u(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}const m=e=>"nextjs"===(null==e?void 0:e.template)?a.createElement(h,e):a.createElement(f,e),f=e=>{var t,n,d,m,f,h,{startRoute:g,showNavigator:b,showLineNumbers:k,showOpenInCodeSandbox:y,initialPercentage:v=50,dependencies:N,showReadOnly:w,options:x={showTabs:!0,initMode:"lazy",classes:{"sp-bridge-frame":"!hidden","sp-layout":"!rounded-lg !border-gray-300 dark:!border-gray-700","sp-editor":"!gap-0 border-r !border-r-gray-300 dark:!border-r-gray-700","sp-tabs":"!border-b-gray-300 dark:!border-b-gray-700 !bg-gray-0 dark:!bg-gray-800","sp-tabs-scrollable-container":"!min-h-[32px]","sp-input":"!text-gray-800 dark:!text-gray-100","sp-cm":(0,r.Z)("p-0 bg-transparent","[&>.cm-editor]:!bg-refine-react-light-code","[&>.cm-editor]:dark:!bg-refine-react-dark-code","[&_.cm-activeLine]:!bg-gray-100 [&_.cm-activeLine]:dark:!bg-gray-800"),"sp-icon-standalone":"!bg-gray-300 dark:!bg-gray-700 !text-gray-400 dark:!text-gray-500","sp-file-explorer":"border-r !border-r-gray-300 dark:!border-r-gray-700","sp-console":(0,r.Z)("not-prose","!border-t-0 !border !border-solid !border-t-none","!border-gray-300 dark:!border-gray-700","!rounded-bl-lg !rounded-br-lg","!bg-refine-react-light-code","dark:!bg-refine-react-dark-code"),"sp-console-header":(0,r.Z)("!bg-gray-0 dark:!bg-gray-800","border-b border-solid !border-b-gray-300 dark:!border-b-gray-700","!h-[32px] !min-h-[32px]"),"sp-console-header-actions":(0,r.Z)("h-full","!gap-0"),"sp-console-header-button":(0,r.Z)("!bg-transparent","!border !border-solid !border-b-0 !border-x-gray-300 dark:!border-x-gray-700","!border-t-2 !border-t-transparent [&[data-active='true']]:!border-t-refine-react-light-link dark:[&[data-active='true']]:!border-t-refine-react-dark-link","h-full","!text-gray-800 dark:!text-gray-100","!rounded-none","-ml-px"),"sp-console-list":(0,r.Z)("!bg-refine-react-light-code","dark:!bg-refine-react-dark-code","[&>code]:!bg-transparent"),"sp-tab-button":(0,r.Z)("!h-8","!px-2 !pb-2 !pt-1.5","!text-gray-800 dark:!text-gray-100","!border !border-solid !border-b-0 !border-x-gray-300 dark:!border-x-gray-700","-ml-px first:ml-0","!border-t-2 !border-t-transparent [&[data-active='true']]:!border-t-refine-react-light-link dark:[&[data-active='true']]:!border-t-refine-react-dark-link")}},template:P="react-ts",customSetup:C,files:T,previewOnly:R,layout:O,height:I=420,wrapperClassName:S,className:F,showFiles:E=!1,showConsole:A=!1,hidePreview:L=!1}=e,j=u(e,["startRoute","showNavigator","showLineNumbers","showOpenInCodeSandbox","initialPercentage","dependencies","showReadOnly","options","template","customSetup","files","previewOnly","layout","height","wrapperClassName","className","showFiles","showConsole","hidePreview"]);const[D,B]=a.useState(!1);a.useEffect((()=>{B(!0)}),[]);const{colorMode:M}=(0,s.I)();var z,U;null!=x||(x={}),null!==(z=(f=x).resizablePanels)&&void 0!==z||(f.resizablePanels=!0),null!==(U=(h=x).editorWidthPercentage)&&void 0!==U||(h.editorWidthPercentage=null!=v?v:50);const H={showTabs:x.showTabs,showLineNumbers:x.showLineNumbers,showInlineErrors:x.showInlineErrors,wrapContent:x.wrapContent,closableTabs:x.closableTabs,initMode:x.initMode,extensions:null===(t=x.codeEditor)||void 0===t?void 0:t.extensions,extensionsKeymap:null===(n=x.codeEditor)||void 0===n?void 0:n.extensionsKeymap,readOnly:x.readOnly,showReadOnly:null!=w?w:x.showReadOnly,additionalLanguages:null===(d=x.codeEditor)||void 0===d?void 0:d.additionalLanguages},Z={activeFile:x.activeFile,visibleFiles:x.visibleFiles,recompileMode:x.recompileMode,recompileDelay:x.recompileDelay,autorun:x.autorun,autoReload:x.autoReload,bundlerURL:x.bundlerURL,startRoute:x.startRoute,skipEval:x.skipEval,fileResolver:x.fileResolver,initMode:x.initMode,initModeObserverOptions:x.initModeObserverOptions,externalResources:x.externalResources,logLevel:x.logLevel,classes:x.classes},[G,W]=a.useState(!1),{onHandleMouseDown:_,horizontalSize:q}=(({initialSize:e=50})=>{const[t,n]=a.useState(e),r=a.useRef(null),i=e=>{if(!r.current)return;const t=r.current.parentElement;if(!t)return;const{left:a,width:i}=t.getBoundingClientRect(),o=(e.clientX-a)/i*100,s=Math.min(Math.max(o,25),75);n(s),t.querySelectorAll(".sp-stack").forEach((e=>{e.style.pointerEvents="none"}))},o=()=>{var e;const t=null===(e=r.current)||void 0===e?void 0:e.parentElement;t&&(t.querySelectorAll(".sp-stack").forEach((e=>{e.style.pointerEvents=""})),r.current=null)};return a.useEffect((()=>(document.body.addEventListener("mousemove",i),document.body.addEventListener("mouseup",o),()=>{document.body.removeEventListener("mousemove",i),document.body.removeEventListener("mouseup",o)})),[]),{horizontalSize:t,onHandleMouseDown:a.useCallback((e=>{r.current=e.target}),[])}})({initialSize:x.editorWidthPercentage}),Q=!R&&!(null==O?void 0:O.includes("col"));var $,K,X,Y,V;return a.createElement(a.Fragment,null,a.createElement("div",{className:(0,r.Z)("pb-6",S)},a.createElement("div",{className:(0,r.Z)("absolute","left-0","right-0","w-full","px-2","md:px-4","xl:px-6","max-w-screen-xl","mx-auto",F)},a.createElement(o.oT,c({key:`${P}-${M}-${D}`,customSetup:c({dependencies:N},C),files:T,options:p(c({},Z),{classes:p(c({},Z.classes),{"sp-layout":(0,r.Z)(null===(m=Z.classes)||void 0===m?void 0:m["sp-layout"],A&&"!rounded-bl-none !rounded-br-none")})}),template:P,theme:"light"===M?p(c({},i.FM),{colors:p(c({},i.FM.colors),{accent:"#1D1E30",surface1:"transparent",surface2:"transparent",surface3:"transparent"})}):p(c({},i.I2),{colors:p(c({},i.I2.colors),{surface1:"transparent",surface2:"transparent",surface3:"transparent"})}),className:(0,r.Z)("not-prose sandpack-container","max-w-screen-xl","animate-reveal")},j),a.createElement(o.sp,{className:(0,r.Z)("col"===O&&"!flex-col","col-reverse"===O&&"!flex-col-reverse")},E&&a.createElement(o.Lj,{autoHiddenFiles:!0,style:{height:null!==($=x.editorHeight)&&void 0!==$?$:I}}),!R&&a.createElement(o._V,p(c({},H),{showLineNumbers:k,closableTabs:E,initMode:"lazy",style:p(c({height:null!==(K=x.editorHeight)&&void 0!==K?K:I},(null==O?void 0:O.includes("col"))?{flex:"initial"}:{flexGrow:q,flexShrink:q,flexBasis:0}),{overflow:"hidden"})})),Q?a.createElement(l,{onMouseDown:_,horizontalSize:q}):null,L?null:a.createElement(a.Fragment,null,a.createElement(o.Gj,{showOpenInCodeSandbox:y,startRoute:g,showNavigator:null!=b?b:x.showNavigator,showRefreshButton:x.showRefreshButton,style:p(c({display:L?"none":"flex"},(null==O?void 0:O.includes("col"))?{flex:"initial",width:"100%"}:{flexGrow:100-q,flexShrink:100-q,flexBasis:0,width:R?"100%":100-q+"%"}),{gap:0,height:null!==(X=x.editorHeight)&&void 0!==X?X:I})},a.createElement("div",{className:"sp-custom-loading"},a.createElement("img",{src:"https://refine.ams3.cdn.digitaloceanspaces.com/website/static/assets/spinner.gif",className:(0,r.Z)("w-12","h-12","rounded-full")}))))),A?a.createElement(o.Tq,{style:p(c({height:200},(null==O?void 0:O.includes("col"))?{flex:"initial"}:{flexGrow:q,flexShrink:q,flexBasis:0}),{overflow:"hidden"})}):null)),a.createElement("div",{className:(0,r.Z)(""),style:{height:Number(null!==(Y=x.editorHeight)&&void 0!==Y?Y:I)+2}}),a.createElement("div",{className:(0,r.Z)((null==O?void 0:O.includes("col"))?"block":"block md:hidden"),style:{height:Number(null!==(V=x.editorHeight)&&void 0!==V?V:I)+2}}),a.createElement("div",{className:(0,r.Z)(A?"block":"hidden","h-[200px]")})),a.createElement("section",{className:"hidden max-w-0 max-h-0"},a.createElement("p",null,`Dependencies: ${Object.keys(null!=N?N:{}).map((e=>`${e}@${N[e]}`))}`),a.createElement("h3",null,"Code Files"),Object.keys(null!=T?T:{}).map((e=>a.createElement("div",{key:e},a.createElement("div",null,`File: ${e}`),a.createElement("div",null,`Content: ${"code"in T[e]?T[e].code:T[e]}`))))))},h=e=>{const t={hidePreview:!0,showConsole:!1};return a.createElement(f,p(c({},t,e),{template:"react-ts"}))}},57218:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>S,contentTitle:()=>O,default:()=>z,frontMatter:()=>R,metadata:()=>I,toc:()=>F});var r=n(67294),a=n(3905),i=n(58943);function o(){return r.createElement(i.x,{dependencies:{"@refinedev/core":"latest","@refinedev/simple-rest":"latest","@refinedev/antd":"latest",antd:"latest"},startRoute:"/",files:{"/App.tsx":{code:s,hidden:!1},"/product-table.tsx":{code:l,hidden:!1,active:!0}}})}const s='\nimport React from "react";\nimport { Refine } from "@refinedev/core";\nimport dataProvider from "@refinedev/simple-rest";\nimport { ConfigProvider, App as AntdApp } from "antd";\nimport { ProductTable } from "./product-table.tsx";\n\nconst API_URL = "https://api.fake-rest.refine.dev";\n\nexport default function App() {\n    return (\n        <ConfigProvider>\n          <AntdApp>\n            <Refine dataProvider={dataProvider(API_URL)}>\n                <ProductTable />\n            </Refine>\n          </AntdApp>\n        </ConfigProvider>\n    );\n}\n\n'.trim(),l='\nimport React from "react";\nimport { useTable, FilterDropdown } from "@refinedev/antd";\nimport { Table, Input } from "antd";\n\nexport const ProductTable: React.FC = () => {\n    const { tableProps } = useTable<IProduct>({\n        resource: "products",\n        filters: {\n            initial: [\n                {\n                    field: "name",\n                    operator: "contains",\n                    value: "",\n                },\n            ],\n        },\n    });\n\n    return (\n        <div style={{ padding: "4px" }}>\n            <h2>Products</h2>\n            <Table {...tableProps} rowKey="id">\n                <Table.Column\n                    dataIndex="id"\n                    title="ID"\n                    sorter={{ multiple: 2 }}\n                />\n                <Table.Column\n                    dataIndex="name"\n                    title="Name"\n                    filterDropdown={(props) => (\n                        <FilterDropdown {...props}>\n                            <Input placeholder="Search by name" />\n                        </FilterDropdown>\n                    )}\n                />\n                <Table.Column\n                    dataIndex="price"\n                    title="Price"\n                    sorter={{ multiple: 1 }}\n                />\n            </Table>\n        </div>\n    );\n};\n\ninterface IProduct {\n    id: number;\n    name: string;\n    price: string;\n    material: string;\n}\n\n\n'.trim();function d(){return r.createElement(i.x,{dependencies:{"@refinedev/core":"latest","@refinedev/simple-rest":"latest","@refinedev/antd":"latest",antd:"latest"},startRoute:"/",files:{"/App.tsx":{code:c,hidden:!1},"/product-table.tsx":{code:p,hidden:!1,active:!0}}})}const c='\nimport React from "react";\nimport { Refine } from "@refinedev/core";\nimport dataProvider from "@refinedev/simple-rest";\nimport { ConfigProvider, App as AntdApp } from "antd";\nimport { ProductTable } from "./product-table.tsx";\n\nconst API_URL = "https://api.fake-rest.refine.dev";\n\nexport default function App() {\n    return (\n        <ConfigProvider>\n          <AntdApp>\n            <Refine dataProvider={dataProvider(API_URL)}>\n                <ProductTable />\n            </Refine>\n          </AntdApp>\n        </ConfigProvider>\n    );\n}\n\n'.trim(),p='\nimport React from "react";\nimport { HttpError } from "@refinedev/core";\nimport { useTable } from "@refinedev/antd";\nimport { Button, Form, Input, Space, Table } from "antd";\n\nexport const ProductTable: React.FC = () => {\n    const { tableProps, searchFormProps } = useTable<\n        IProduct,\n        HttpError,\n        IProduct\n    >({\n        resource: "products",\n        onSearch: (values) => {\n            return [\n                {\n                    field: "name",\n                    operator: "contains",\n                    value: values.name,\n                },\n            ];\n        },\n    });\n\n    return (\n        <div style={{ padding: "4px" }}>\n            <h2>Products</h2>\n            <Form {...searchFormProps}>\n                <Space>\n                    <Form.Item name="name">\n                        <Input placeholder="Search by name" />\n                    </Form.Item>\n                    <Form.Item>\n                        <Button htmlType="submit">Search</Button>\n                    </Form.Item>\n                </Space>\n            </Form>\n            <Table {...tableProps} rowKey="id">\n                <Table.Column dataIndex="id" title="ID" />\n                <Table.Column dataIndex="name" title="Name" />\n                <Table.Column dataIndex="price" title="Price" />\n            </Table>\n        </div>\n    );\n};\n\ninterface IProduct {\n    id: number;\n    name: string;\n    price: string;\n}\n\n'.trim();function u(){return r.createElement(i.x,{dependencies:{"@refinedev/core":"latest","@refinedev/simple-rest":"latest"},startRoute:"/",files:{"/App.tsx":{code:m,hidden:!1},"/home-page.tsx":{code:f,hidden:!1,active:!0}}})}const m='\nimport React from "react";\nimport { Refine } from "@refinedev/core";\nimport dataProvider from "@refinedev/simple-rest";\nimport { HomePage } from "./home-page.tsx";\n\n\nconst API_URL = "https://api.fake-rest.refine.dev";\n\n\nexport default function App() {\n    return (\n        <Refine\n          dataProvider={dataProvider(API_URL)}\n        >\n            <HomePage />\n        </Refine>\n    );\n}\n\n'.trim(),f='\nimport React from "react";\nimport { useTable, HttpError, useMany } from "@refinedev/core";\n\nexport const HomePage: React.FC = () => {\n    const { tableQueryResult } = useTable<IPost, HttpError>({\n        resource: "posts",\n    });\n    const posts = tableQueryResult?.data?.data ?? [];\n\n    const categoryIds = posts.map((item) => item.category.id);\n    const { data: categoriesData, isLoading } = useMany<ICategory>({\n        resource: "categories",\n        ids: categoryIds,\n        queryOptions: {\n            enabled: categoryIds.length > 0,\n        },\n    });\n\n    if (tableQueryResult?.isLoading) {\n        return <div>Loading...</div>;\n    }\n\n    return (\n        <div>\n            <h1>Posts</h1>\n            <table>\n                <thead>\n                    <tr>\n                        <th>ID</th>\n                        <th>Title</th>\n                        <th>Category</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {posts.map((post) => (\n                        <tr key={post.id}>\n                            <td>{post.id}</td>\n                            <td>{post.title}</td>\n                            <td>\n                                {isLoading ? (\n                                    <div>Loading...</div>\n                                ) : (\n                                    categoriesData?.data.find(\n                                        (item) => item.id === post.category.id,\n                                    )?.title\n                                )}\n                            </td>\n                        </tr>\n                    ))}\n                </tbody>\n            </table>\n        </div>\n    );\n};\n\ninterface IPost {\n    id: number;\n    title: string;\n    category: {\n        id: number;\n    };\n}\n\ninterface ICategory {\n    id: number;\n    title: string;\n}\n\n'.trim();function h(){return r.createElement(i.x,{dependencies:{"@refinedev/core":"latest","@refinedev/simple-rest":"latest"},startRoute:"/",files:{"/App.tsx":{code:g,hidden:!1},"/product-table.tsx":{code:b,hidden:!1,active:!0}}})}const g='\nimport React from "react";\nimport { Refine } from "@refinedev/core";\nimport dataProvider from "@refinedev/simple-rest";\nimport { ProductTable } from "./product-table.tsx";\n\nconst API_URL = "https://api.fake-rest.refine.dev";\n\nexport default function App() {\n    return (\n        <Refine dataProvider={dataProvider(API_URL)}>\n            <ProductTable />\n        </Refine>\n    );\n}\n\n'.trim(),b='\nimport React from "react";\nimport { useTable } from "@refinedev/core";\n\nexport const ProductTable: React.FC = () => {\n  const { tableQueryResult, pageCount, pageSize, current, setCurrent } = useTable<IProduct>({\n    resource: "products",\n    pagination: {\n        current: 1, \n        pageSize: 10,\n        mode: "server", // "client" or "server"\n    },\n  });\n  const posts = tableQueryResult?.data?.data ?? [];\n\n  if (tableQueryResult?.isLoading) {\n    return <div>Loading...</div>;\n  }\n\n  return (\n    <div>\n      <h1>Products</h1>\n      <table>\n        <thead>\n          <tr>\n            <th>ID</th>\n            <th>Name</th>\n            <th>Price</th>\n          </tr>\n        </thead>\n        <tbody>\n          {posts.map((post) => (\n            <tr key={post.id}>\n              <td>{post.id}</td>\n              <td>{post.name}</td>\n              <td>{post.price}</td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n      <hr />\n      <p>Current Page: {current}</p>\n      <p>Page Size: {pageSize}</p>\n      <button\n        onClick={() => {\n          setCurrent(current - 1);\n        }}\n        disabled={current < 2}\n      >\n        Previous Page\n      </button>\n      <button\n        onClick={() => {\n          setCurrent(current + 1);\n        }}\n        disabled={current === pageCount}\n      >\n        Next Page\n      </button>\n    </div>\n  );\n};\n\ninterface IProduct {\n    id: number;\n    name: string;\n    price: string;\n}\n'.trim();function k(){return r.createElement(i.x,{dependencies:{"@refinedev/core":"latest","@refinedev/simple-rest":"latest"},startRoute:"/",files:{"/App.tsx":{code:y,hidden:!1},"/product-table.tsx":{code:v,hidden:!1,active:!0}}})}const y='\nimport React from "react";\nimport { Refine } from "@refinedev/core";\nimport dataProvider from "@refinedev/simple-rest";\nimport { ProductTable } from "./product-table.tsx";\n\nconst API_URL = "https://api.fake-rest.refine.dev";\n\nexport default function App() {\n    return (\n        <Refine dataProvider={dataProvider(API_URL)}>\n            <ProductTable />\n        </Refine>\n    );\n}\n\n'.trim(),v='\nimport React from "react";\nimport { useTable } from "@refinedev/core";\n\n\nexport const ProductTable: React.FC = () => {\n  const { tableQueryResult, filters, setFilters } = useTable<IProduct>({\n      resource: "products",\n      filters: {\n          permanent: [\n              {\n                  field: "price",\n                  value: "200",\n                  operator: "lte",\n              },\n          ],\n          initial: [{ field: "category.id", operator: "eq", value: "1" }],\n      },\n  });\n  const products = tableQueryResult?.data?.data ?? [];\n\n  const getFilterByField = (field: string) => {\n      return filters.find((filter) => {\n          if ("field" in filter && filter.field === field) {\n              return filter;\n          }\n      }) as LogicalFilter | undefined;\n  };\n\n  const resetFilters = () => {\n    setFilters([], "replace");\n  };\n\n\n  if (tableQueryResult.isLoading) {\n      return <div>Loading...</div>;\n  }\n\n  return (\n      <div>\n          <h1>Products with price less than 200</h1>\n          <table>\n              <thead>\n                  <tr>\n                      <th>ID</th>\n                      <th>Name</th>\n                      <th>Price</th>\n                      <th>categoryId</th>\n                  </tr>\n              </thead>\n              <tbody>\n                  {products.map((product) => (\n                      <tr key={product.id}>\n                          <td>{product.id}</td>\n                          <td>{product.name}</td>\n                          <td>{product.price}</td>\n                          <td>{product.category.id}</td>\n                      </tr>\n                  ))}\n              </tbody>\n          </table>\n          <hr />\n          Filtering by field:\n          <b>\n              {getFilterByField("category.id")?.field}, operator{" "}\n              {getFilterByField("category.id")?.operator}, value\n              {getFilterByField("category.id")?.value}\n          </b>\n          <br />\n          <button\n              onClick={() => {\n                  setFilters([\n                      {\n                          field: "category.id",\n                          operator: "eq",\n                          value:\n                              getFilterByField("category.id")?.value === "1"\n                                  ? "2"\n                                  : "1",\n                      },\n                  ]);\n              }}\n          >\n              Toggle Filter\n          </button>\n          <button onClick={resetFilters}>Reset filter</button>\n      </div>\n  );\n};\n\ninterface IProduct {\n  id: number;\n  name: string;\n  price: string;\n  category: {\n      id: number;\n  };\n}\n\n'.trim();function N(){return r.createElement(i.x,{dependencies:{"@refinedev/core":"latest","@refinedev/simple-rest":"latest"},startRoute:"/",files:{"/App.tsx":{code:w,hidden:!1},"/product-table.tsx":{code:x,hidden:!1,active:!0}}})}const w='\nimport React from "react";\nimport { Refine } from "@refinedev/core";\nimport dataProvider from "@refinedev/simple-rest";\nimport { ProductTable } from "./product-table.tsx";\n\nconst API_URL = "https://api.fake-rest.refine.dev";\n\nexport default function App() {\n    return (\n        <Refine dataProvider={dataProvider(API_URL)}>\n            <ProductTable />\n        </Refine>\n    );\n}\n\n'.trim(),x='\nimport React from "react";\nimport { useTable } from "@refinedev/core";\n\nexport const ProductTable: React.FC = () => {\n    const { tableQueryResult, sorters, setSorters } = useTable<IProduct>({\n        resource: "products",\n        sorters: {\n            initial: [{ field: "price", order: "asc" }],\n        },\n    });\n    const products = tableQueryResult?.data?.data ?? [];\n\n    const findSorterByFieldName = (fieldName: string) => {\n        return sorters.find((sorter) => sorter.field === fieldName);\n    };\n\n\n    if (tableQueryResult.isLoading) {\n        return <div>Loading...</div>;\n    }\n    \n    return (\n        <div>\n            <h1>Products</h1>\n            <table>\n                <thead>\n                    <tr>\n                        <th>ID</th>\n                        <th>Name</th>\n                        <th>Price</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {products.map((product) => (\n                        <tr key={product.id}>\n                            <td>{product.id}</td>\n                            <td>{product.name}</td>\n                            <td>{product.price}</td>\n                        </tr>\n                    ))}\n                </tbody>\n            </table>\n            <hr />\n            <hr />\n            Sorting by field:\n            <b>\n                {findSorterByFieldName("price")?.field}, order{" "}\n                {findSorterByFieldName("price")?.order}\n            </b>\n            <br />\n            <button\n                onClick={() => {\n                    setSorters([\n                        {\n                            field: "price",\n                            order:\n                                findSorterByFieldName("price")?.order === "asc"\n                                    ? "desc"\n                                    : "asc",\n                        },\n                    ]);\n                }}\n            >\n                Toggle Sort\n            </button>\n        </div>\n    );\n};\n\ninterface IProduct {\n    id: number;\n    name: string;\n    price: string;\n}\n\n\n'.trim();function P(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function C(e,t){return t=null!=t?t:{},Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):function(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))})),e}function T(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}const R={title:"Tables"},O=void 0,I={unversionedId:"guides-concepts/tables/index",id:"guides-concepts/tables/index",title:"Tables",description:"Tables are essential in data-intensive applications, serving as the primary way for organizing and displaying data in a readable format using rows and columns. Their integration, however, is complex due to functionalities like sorting, filtering, and pagination. Refine's tables integration aims to make this process as simple as possible while providing as many real world features as possible out of the box. This guide will cover the basics of tables in Refine and how to use them.",source:"@site/docs/guides-concepts/tables/index.md",sourceDirName:"guides-concepts/tables",slug:"/guides-concepts/tables/",permalink:"/ithub-itday-april-refine/docs/guides-concepts/tables/",draft:!1,editUrl:"https://github.com/refinedev/refine/tree/master/documentation/docs/guides-concepts/tables/index.md",tags:[],version:"current",frontMatter:{title:"Tables"},sidebar:"mainSidebar",previous:{title:"Forms",permalink:"/ithub-itday-april-refine/docs/guides-concepts/forms/"},next:{title:"Routing",permalink:"/ithub-itday-april-refine/docs/guides-concepts/routing/"}},S={},F=[{value:"Handling Data",id:"handling-data",level:2},{value:"Basic Usage",id:"basic-usage",level:2},{value:'Pagination <GuideBadge id="guides-concepts/data-fetching/#filters-sorters-and-pagination" />',id:"pagination-",level:2},{value:'Filtering <GuideBadge id="guides-concepts/data-fetching/#filters-sorters-and-pagination" />',id:"filtering-",level:2},{value:'Sorting <GuideBadge id="guides-concepts/data-fetching/#filters-sorters-and-pagination" />',id:"sorting-",level:2},{value:"Search",id:"search",level:2},{value:"Integrating with Routers",id:"integrating-with-routers",level:2},{value:'Resource <RouterBadge id="guides-concepts/routing/#relationship-between-resources-and-routes-"/>',id:"resource-",level:3},{value:'Sync with Location <RouterBadge id="guides-concepts/routing/#usetable" /> <GlobalConfigBadge id="core/refine-component/#syncwithlocation" />',id:"sync-with-location--",level:3},{value:'Relationships <GuideBadge id="guides-concepts/data-fetching/#relationships" />',id:"relationships-",level:2}],E=e=>function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,a.kt)("div",t)},A=E("Tabs"),L=E("TabItem"),j=E("GuideBadge"),D=E("RouterBadge"),B=E("GlobalConfigBadge"),M={toc:F};function z(e){var{components:t}=e,n=T(e,["components"]);return(0,a.kt)("wrapper",C(function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{},r=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(r=r.concat(Object.getOwnPropertySymbols(n).filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable})))),r.forEach((function(t){P(e,t,n[t])}))}return e}({},M,n),{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Tables are essential in data-intensive applications, serving as the primary way for organizing and displaying data in a readable format using rows and columns. Their integration, however, is complex due to functionalities like sorting, filtering, and pagination. Refine's ",(0,a.kt)("strong",{parentName:"p"},"tables")," integration aims to make this process as simple as possible while providing as many real world features as possible out of the box. This guide will cover the basics of ",(0,a.kt)("strong",{parentName:"p"},"tables")," in Refine and how to use them."),(0,a.kt)("h2",{id:"handling-data"},"Handling Data"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"/docs/data/hooks/use-table"},(0,a.kt)("inlineCode",{parentName:"a"},"useTable"))," allows us to fetch data according to the sorter, filter, and pagination states. Under the hood, it uses ",(0,a.kt)("a",{parentName:"p",href:"/docs/data/hooks/use-list"},(0,a.kt)("inlineCode",{parentName:"a"},"useList"))," for the fetch. Its designed to be headless, but Refine offers seamless integration with several popular UI libraries, simplifying the use of their table components."),(0,a.kt)("h2",{id:"basic-usage"},"Basic Usage"),(0,a.kt)("p",null,"The usage of the ",(0,a.kt)("inlineCode",{parentName:"p"},"useTable")," hooks may slightly differ between UI libraries, however, the core functionality of ",(0,a.kt)("inlineCode",{parentName:"p"},"useTable")," hook in ",(0,a.kt)("a",{parentName:"p",href:"/docs/data/hooks/use-table"},(0,a.kt)("inlineCode",{parentName:"a"},"@refinedev/core"))," stays consistent in all implementations. The ",(0,a.kt)("inlineCode",{parentName:"p"},"useTable")," hook in Refine's core is the foundation of all the other ",(0,a.kt)("inlineCode",{parentName:"p"},"useTable")," implementations."),(0,a.kt)(A,{wrapContent:!1,mdxType:"Tabs"},(0,a.kt)(L,{value:"ant-design",label:"Ant Design",mdxType:"TabItem"},(0,a.kt)(o,{mdxType:"BaseAntdTableExample"}),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"/docs/ui-integrations/ant-design/hooks/use-table"},"Check out Ant Design's ",(0,a.kt)("inlineCode",{parentName:"a"},"useTable")," reference page to learn more about the usage and see it in action.")))),(0,a.kt)("h2",{id:"pagination-"},"Pagination ",(0,a.kt)(j,{id:"guides-concepts/data-fetching/#filters-sorters-and-pagination",mdxType:"GuideBadge"})),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"useTable")," has a pagination feature. The pagination is done by passing the ",(0,a.kt)("inlineCode",{parentName:"p"},"current"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"pageSize")," and, ",(0,a.kt)("inlineCode",{parentName:"p"},"mode")," keys to ",(0,a.kt)("inlineCode",{parentName:"p"},"pagination")," object."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"current"),": The page index."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"pageSize"),": The number of items per page."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"mode"),": Whether to use server side pagination or not.",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"When ",(0,a.kt)("inlineCode",{parentName:"li"},"server")," is selected, the pagination will be handled on the server side."),(0,a.kt)("li",{parentName:"ul"},"When ",(0,a.kt)("inlineCode",{parentName:"li"},"client")," is selected, the pagination will be handled on the client side. No request will be sent to the server."),(0,a.kt)("li",{parentName:"ul"},"When ",(0,a.kt)("inlineCode",{parentName:"li"},"off")," is selected, the pagination will be disabled. All data will be fetched from the server.")))),(0,a.kt)("p",null,"You can also change the ",(0,a.kt)("inlineCode",{parentName:"p"},"current")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"pageSize")," values by using the ",(0,a.kt)("inlineCode",{parentName:"p"},"setCurrent")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"setPageSize")," functions that are returned by the ",(0,a.kt)("inlineCode",{parentName:"p"},"useTable")," hook. Every change will trigger a new fetch."),(0,a.kt)(h,{mdxType:"Pagination"}),(0,a.kt)("h2",{id:"filtering-"},"Filtering ",(0,a.kt)(j,{id:"guides-concepts/data-fetching/#filters-sorters-and-pagination",mdxType:"GuideBadge"})),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"useTable")," has a filter feature. The filter is done by using the ",(0,a.kt)("inlineCode",{parentName:"p"},"initial"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"permanent"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"defaultBehavior")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"mode")," keys to ",(0,a.kt)("inlineCode",{parentName:"p"},"filters")," object."),(0,a.kt)("p",null,"These states are a ",(0,a.kt)("a",{parentName:"p",href:"/docs/core/interface-references#crudfilters"},(0,a.kt)("inlineCode",{parentName:"a"},"CrudFilters"))," type for creating complex single or multiple queries."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"initial"),": The initial filter state. It can be changed by the ",(0,a.kt)("inlineCode",{parentName:"li"},"setFilters")," function."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"permanent"),": The default and unchangeable filter state. It can't be changed by the ",(0,a.kt)("inlineCode",{parentName:"li"},"setFilters")," function."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"defaultBehavior"),": The default behavior of the ",(0,a.kt)("inlineCode",{parentName:"li"},"setFilters")," function.",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"When ",(0,a.kt)("inlineCode",{parentName:"li"},"merge")," is selected, the new filters will be merged with the old ones."),(0,a.kt)("li",{parentName:"ul"},"When ",(0,a.kt)("inlineCode",{parentName:"li"},"replace")," is selected, the new filters will replace the old ones. It means that the old filters will be deleted."))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"mode"),": Whether to use server side filter or not.",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"When ",(0,a.kt)("inlineCode",{parentName:"li"},"server")," is selected, the filters will be sent to the server."),(0,a.kt)("li",{parentName:"ul"},"When ",(0,a.kt)("inlineCode",{parentName:"li"},"off")," is selected, the filters will be applied on the client side.")))),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"/docs/data/hooks/use-table"},(0,a.kt)("inlineCode",{parentName:"a"},"useTable"))," will pass these states to ",(0,a.kt)("a",{parentName:"p",href:"/docs/data/data-provider"},(0,a.kt)("inlineCode",{parentName:"a"},"dataProvider"))," for making it possible to fetch the data you need. Handling and adapting these states for API requests is the responsibility of the ",(0,a.kt)("a",{parentName:"p",href:"/docs/data/data-provider"},(0,a.kt)("inlineCode",{parentName:"a"},"dataProvider"))),(0,a.kt)(k,{mdxType:"Filtering"}),(0,a.kt)("h2",{id:"sorting-"},"Sorting ",(0,a.kt)(j,{id:"guides-concepts/data-fetching/#filters-sorters-and-pagination",mdxType:"GuideBadge"})),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"/docs/data/hooks/use-table"},(0,a.kt)("inlineCode",{parentName:"a"},"useTable"))," has a sorter feature. The sorter is done by passing the ",(0,a.kt)("inlineCode",{parentName:"p"},"initial")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"permanent")," keys to ",(0,a.kt)("inlineCode",{parentName:"p"},"sorters")," object. These states are a ",(0,a.kt)("a",{parentName:"p",href:"/docs/core/interface-references#crudsorting"},(0,a.kt)("inlineCode",{parentName:"a"},"CrudSorter"))," type for creating single or multiple queries."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"initial"),": The initial sorter state. It can be changed by the ",(0,a.kt)("inlineCode",{parentName:"li"},"setSorters")," function."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"permanent"),": The default and unchangeable sorter state. It can't be changed by the ",(0,a.kt)("inlineCode",{parentName:"li"},"setSorters")," function.")),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"/docs/data/hooks/use-table"},(0,a.kt)("inlineCode",{parentName:"a"},"useTable"))," will pass these states to ",(0,a.kt)("a",{parentName:"p",href:"/docs/data/data-provider"},(0,a.kt)("inlineCode",{parentName:"a"},"dataProvider"))," for making it possible to fetch the data you need. Handling and adapting these states for API requests is the responsibility of the ",(0,a.kt)("a",{parentName:"p",href:"/docs/data/data-provider"},(0,a.kt)("inlineCode",{parentName:"a"},"dataProvider"))),(0,a.kt)("p",null,"You can change the sorters state by using the ",(0,a.kt)("inlineCode",{parentName:"p"},"setSorters")," function. Every change will trigger a new fetch."),(0,a.kt)(N,{mdxType:"Sorting"}),(0,a.kt)("h2",{id:"search"},"Search"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"useTable")," has a search feature with ",(0,a.kt)("inlineCode",{parentName:"p"},"onSearch"),". The search is done by using the ",(0,a.kt)("inlineCode",{parentName:"p"},"onSearch")," function with ",(0,a.kt)("inlineCode",{parentName:"p"},"searchFormProps"),". These feature enables you to easily connect form state to the table filters."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"onSearch"),": function is triggered when the ",(0,a.kt)("inlineCode",{parentName:"li"},"searchFormProps.onFinish")," is called. It receives the form values as the first argument and expects a promise that returns a ",(0,a.kt)("a",{parentName:"li",href:"/docs/core/interface-references#crudfilters"},(0,a.kt)("inlineCode",{parentName:"a"},"CrudFilters"))," type."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"searchFormProps"),": Has necessary props for the ",(0,a.kt)("inlineCode",{parentName:"li"},"<form>"),".")),(0,a.kt)("p",null,"For example we can fetch product with the name that contains the search value."),(0,a.kt)(A,{wrapContent:!1,mdxType:"Tabs"},(0,a.kt)(L,{value:"ant-design",label:"Ant Design",mdxType:"TabItem"},(0,a.kt)(d,{mdxType:"SearchAntdTableExample"}),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"/docs/ui-integrations/ant-design/hooks/use-table"},"Check out Ant Design's ",(0,a.kt)("inlineCode",{parentName:"a"},"useTable")," reference page to learn more about the usage and see it in action.")))),(0,a.kt)("h2",{id:"integrating-with-routers"},"Integrating with Routers"),(0,a.kt)("h3",{id:"resource-"},"Resource ",(0,a.kt)(D,{id:"guides-concepts/routing/#relationship-between-resources-and-routes-",mdxType:"RouterBadge"})),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"useTable")," can infer current ",(0,a.kt)("inlineCode",{parentName:"p"},"resource")," from the current route based on your resource definitions. This eliminates the need of passing these parameters to the hooks manually."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},'useTable({\n  // When the current route is `/products`, the resource prop can be omitted.\n  resource: "products",\n});\n')),(0,a.kt)("h3",{id:"sync-with-location--"},"Sync with Location ",(0,a.kt)(D,{id:"guides-concepts/routing/#usetable",mdxType:"RouterBadge"})," ",(0,a.kt)(B,{id:"core/refine-component/#syncwithlocation",mdxType:"GlobalConfigBadge"})),(0,a.kt)("p",null,"When you use the ",(0,a.kt)("a",{parentName:"p",href:"/docs/data/hooks/use-table#syncwithlocation"},(0,a.kt)("inlineCode",{parentName:"a"},"syncWithLocation"))," feature, the ",(0,a.kt)("inlineCode",{parentName:"p"},"useTable"),"'s state (e.g., sort order, filters, pagination) is automatically encoded in the query parameters of the URL, and when the URL changes, the ",(0,a.kt)("inlineCode",{parentName:"p"},"useTable")," state is automatically updated to match. This makes it easy to share table state across different routes or pages, and to allow users to bookmark or share links to specific table views."),(0,a.kt)("h2",{id:"relationships-"},"Relationships ",(0,a.kt)(j,{id:"guides-concepts/data-fetching/#relationships",mdxType:"GuideBadge"})),(0,a.kt)("p",null,"Refine handles data relations with data hooks(eg: ",(0,a.kt)("inlineCode",{parentName:"p"},"useOne"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"useMany"),", etc.). This compositional design allows you to flexibly and efficiently manage data relationships to suit your specific requirements."),(0,a.kt)("p",null,"For example imagine each post has a many category. We can fetch the categories of the post by using the ",(0,a.kt)("inlineCode",{parentName:"p"},"useMany")," hook."),(0,a.kt)(u,{mdxType:"Relationship"}))}z.isMDXComponent=!0}}]);