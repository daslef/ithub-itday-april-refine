"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[6503],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),p=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=p(n),m=a,h=d["".concat(s,".").concat(m)]||d[m]||u[m]||o;return n?r.createElement(h,i(i({ref:t},c),{},{components:n})):r.createElement(h,i({ref:t},c))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var p=2;p<o;p++)i[p]=n[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},58431:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>E,contentTitle:()=>R,default:()=>X,frontMatter:()=>T,metadata:()=>L,toc:()=>F});n(67294);var r=n(3905);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){return t=null!=t?t:{},Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):function(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))})),e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}const l={toc:[]};function s(e){var{components:t}=e,n=i(e,["components"]);return(0,r.kt)("wrapper",o(function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{},r=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(r=r.concat(Object.getOwnPropertySymbols(n).filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable})))),r.forEach((function(t){a(e,t,n[t])}))}return e}({},l,n),{components:t,mdxType:"MDXLayout"}),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live url=http://localhost:3000 previewHeight=300px",live:!0,url:"http://localhost:3000",previewHeight:"300px"},'setInitialRoutes(["/posts/create"]);\n// visible-block-start\nimport { useSelect } from "@refinedev/antd";\nimport { Select } from "antd";\n\ninterface ICategory {\n  id: number;\n  title: string;\n}\n\nconst PostCreate: React.FC = () => {\n  const { selectProps } = useSelect<ICategory>({\n    resource: "categories",\n  });\n\n  return (\n    <Select\n      placeholder="Select a category"\n      style={{ width: 300 }}\n      {...selectProps}\n    />\n  );\n};\n// visible-block-end\nsetRefineProps({\n  resources: [\n    {\n      name: "posts",\n      create: PostCreate,\n    },\n  ],\n});\nrender(<RefineAntdDemo />);\n')))}function p(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function c(e,t){return t=null!=t?t:{},Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):function(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))})),e}function u(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}s.isMDXComponent=!0;const d={toc:[]};function m(e){var{components:t}=e,n=u(e,["components"]);return(0,r.kt)("wrapper",c(function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{},r=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(r=r.concat(Object.getOwnPropertySymbols(n).filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable})))),r.forEach((function(t){p(e,t,n[t])}))}return e}({},d,n),{components:t,mdxType:"MDXLayout"}),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live url=http://localhost:3000 previewHeight=300px",live:!0,url:"http://localhost:3000",previewHeight:"300px"},'setInitialRoutes(["/posts/create"]);\n// visible-block-start\nimport { useSelect } from "@refinedev/antd";\nimport { Select } from "antd";\n\ninterface ICategory {\n  id: number;\n  title: string;\n}\n\nconst PostCreate: React.FC = () => {\n  const { selectProps } = useSelect<ICategory>({\n    resource: "categories",\n    // highlight-start\n    onSearch: (value) => [\n      {\n        field: "title",\n        operator: "contains",\n        value,\n      },\n    ],\n    // highlight-end\n  });\n\n  return (\n    <Select\n      placeholder="Select a category"\n      style={{ width: 300 }}\n      {...selectProps}\n    />\n  );\n};\n// visible-block-end\nsetRefineProps({\n  resources: [\n    {\n      name: "posts",\n      create: PostCreate,\n    },\n  ],\n});\nrender(<RefineAntdDemo />);\n')))}function h(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function f(e,t){return t=null!=t?t:{},Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):function(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))})),e}function k(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}m.isMDXComponent=!0;const g={toc:[]};function b(e){var{components:t}=e,n=k(e,["components"]);return(0,r.kt)("wrapper",f(function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{},r=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(r=r.concat(Object.getOwnPropertySymbols(n).filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable})))),r.forEach((function(t){h(e,t,n[t])}))}return e}({},g,n),{components:t,mdxType:"MDXLayout"}),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live url=http://localhost:3000 previewHeight=300px",live:!0,url:"http://localhost:3000",previewHeight:"300px"},'setInitialRoutes(["/posts/create"]);\n// visible-block-start\nimport { useSelect } from "@refinedev/antd";\nimport { Select, Button } from "antd";\n\ninterface ICategory {\n  id: number;\n  title: string;\n}\n\nconst PostCreate: React.FC = () => {\n  const [order, setOrder] = React.useState<"asc" | "desc">("asc");\n\n  const { selectProps } = useSelect<ICategory>({\n    resource: "categories",\n    // highlight-start\n    sorters: [\n      {\n        field: "title",\n        order,\n      },\n    ],\n    // highlight-end\n  });\n\n  return (\n    <>\n      <Select\n        placeholder={`Ordered Categories: ${order}`}\n        style={{ width: 300 }}\n        {...selectProps}\n      />\n      <Button onClick={() => setOrder(order === "asc" ? "desc" : "asc")}>\n        Toggle Order\n      </Button>\n    </>\n  );\n};\n// visible-block-end\nsetRefineProps({\n  resources: [\n    {\n      name: "posts",\n      create: PostCreate,\n    },\n  ],\n});\nrender(<RefineAntdDemo />);\n')))}function y(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function v(e,t){return t=null!=t?t:{},Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):function(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))})),e}function N(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}b.isMDXComponent=!0;const O={toc:[]};function w(e){var{components:t}=e,n=N(e,["components"]);return(0,r.kt)("wrapper",v(function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{},r=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(r=r.concat(Object.getOwnPropertySymbols(n).filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable})))),r.forEach((function(t){y(e,t,n[t])}))}return e}({},O,n),{components:t,mdxType:"MDXLayout"}),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live url=http://localhost:3000 previewHeight=300px",live:!0,url:"http://localhost:3000",previewHeight:"300px"},'setInitialRoutes(["/posts/create"]);\n// visible-block-start\nimport { useSelect } from "@refinedev/antd";\nimport { Select } from "antd";\n\ninterface ICategory {\n  id: number;\n  title: string;\n}\n\nconst PostCreate: React.FC = () => {\n  const { selectProps } = useSelect<ICategory>({\n    resource: "categories",\n    // highlight-next-line\n    defaultValue: 11,\n  });\n\n  return (\n    <Select\n      placeholder="Select a category"\n      style={{ width: 300 }}\n      {...selectProps}\n    />\n  );\n};\n// visible-block-end\nsetRefineProps({\n  resources: [\n    {\n      name: "posts",\n      create: PostCreate,\n    },\n  ],\n});\nrender(<RefineAntdDemo />);\n')))}function C(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function P(e,t){return t=null!=t?t:{},Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):function(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))})),e}function S(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}w.isMDXComponent=!0;const j={toc:[]};function x(e){var{components:t}=e,n=S(e,["components"]);return(0,r.kt)("wrapper",P(function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{},r=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(r=r.concat(Object.getOwnPropertySymbols(n).filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable})))),r.forEach((function(t){C(e,t,n[t])}))}return e}({},j,n),{components:t,mdxType:"MDXLayout"}),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live url=http://localhost:3000 previewHeight=300px",live:!0,url:"http://localhost:3000",previewHeight:"300px"},'setInitialRoutes(["/posts/create"]);\n// visible-block-start\nimport { Create, useSelect, useForm } from "@refinedev/antd";\nimport { Form, Select } from "antd";\n\ninterface ICategory {\n  id: number;\n  title: string;\n}\n\nconst PostCreate: React.FC = () => {\n  const { formProps, saveButtonProps } = useForm<ICategory>();\n\n  const { selectProps } = useSelect<ICategory>({\n    resource: "categories",\n  });\n\n  return (\n    <Create saveButtonProps={saveButtonProps}>\n      <Form {...formProps} layout="vertical">\n        <Form.Item\n          label="Category"\n          placeholder="Select a category"\n          name={["category", "id"]}\n          rules={[\n            {\n              required: true,\n            },\n          ]}\n        >\n          <Select {...selectProps} />\n        </Form.Item>\n      </Form>\n    </Create>\n  );\n};\n// visible-block-end\nsetRefineProps({\n  resources: [\n    {\n      name: "posts",\n      create: PostCreate,\n    },\n  ],\n});\nrender(<RefineAntdDemo />);\n')))}function q(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function D(e,t){return t=null!=t?t:{},Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):function(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))})),e}function I(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}x.isMDXComponent=!0;const T={title:"useSelect",siderbar_label:"useSelect",source:"https://github.com/refinedev/refine/blob/master/packages/antd/src/hooks/fields/useSelect/index.ts"},R=void 0,L={unversionedId:"ui-integrations/ant-design/hooks/use-select/index",id:"ui-integrations/ant-design/hooks/use-select/index",title:"useSelect",description:"useSelect hook allows you to manage Ant Design's `` component when the records in a resource needs to be used as select options.",source:"@site/docs/ui-integrations/ant-design/hooks/use-select/index.md",sourceDirName:"ui-integrations/ant-design/hooks/use-select",slug:"/ui-integrations/ant-design/hooks/use-select/",permalink:"/ithub-itday-april-refine/docs/ui-integrations/ant-design/hooks/use-select/",draft:!1,editUrl:"https://github.com/refinedev/refine/tree/master/documentation/docs/ui-integrations/ant-design/hooks/use-select/index.md",tags:[],version:"current",frontMatter:{title:"useSelect",siderbar_label:"useSelect",source:"https://github.com/refinedev/refine/blob/master/packages/antd/src/hooks/fields/useSelect/index.ts"},sidebar:"mainSidebar",previous:{title:"useStepsForm",permalink:"/ithub-itday-april-refine/docs/ui-integrations/ant-design/hooks/use-steps-form/"},next:{title:"useCheckboxGroup",permalink:"/ithub-itday-april-refine/docs/ui-integrations/ant-design/hooks/use-checkbox-group/"}},E={},F=[{value:"Usage",id:"usage",level:2},{value:"Realtime Updates",id:"realtime-updates",level:2},{value:"Properties",id:"properties",level:2},{value:"resource <PropTag required />",id:"resource-",level:3},{value:"optionLabel and optionValue",id:"optionlabel-and-optionvalue",level:3},{value:"searchField",id:"searchfield",level:3},{value:"sorters",id:"sorters",level:3},{value:"filters",id:"filters",level:3},{value:"defaultValue",id:"defaultvalue",level:3},{value:"debounce",id:"debounce",level:3},{value:"queryOptions",id:"queryoptions",level:3},{value:"pagination",id:"pagination",level:3},{value:"current",id:"current",level:4},{value:"pageSize",id:"pagesize",level:4},{value:"mode",id:"mode",level:4},{value:"defaultValueQueryOptions",id:"defaultvaluequeryoptions",level:3},{value:"onSearch",id:"onsearch",level:3},{value:"Client-side filtering",id:"client-side-filtering",level:4},{value:"meta",id:"meta",level:3},{value:"dataProviderName",id:"dataprovidername",level:3},{value:"successNotification",id:"successnotification",level:3},{value:"errorNotification",id:"errornotification",level:3},{value:"liveMode",id:"livemode",level:3},{value:"onLiveEvent",id:"onliveevent",level:3},{value:"liveParams",id:"liveparams",level:3},{value:"overtimeOptions",id:"overtimeoptions",level:3},{value:"<del>sort</del> <PropTag deprecated />",id:"sort-",level:3},{value:"<del>hasPagination</del> <PropTag deprecated />",id:"haspagination-",level:3},{value:"FAQ",id:"faq",level:2},{value:"How to add search to options (Autocomplete)?",id:"how-to-add-search-to-options-autocomplete",level:3},{value:"How to ensure <code>defaultValue</code> is included in the options?",id:"how-to-ensure-defaultvalue-is-included-in-the-options",level:3},{value:"How to change the <code>label</code> and <code>value</code> properties in options?",id:"how-to-change-the-label-and-value-properties-in-options",level:3},{value:"Can I create the options manually?",id:"can-i-create-the-options-manually",level:3},{value:"How do I use it with <code>CRUD</code> components and <code>useForm</code>?",id:"how-do-i-use-it-with-crud-components-and-useform",level:3},{value:"API Reference",id:"api-reference",level:2},{value:"Properties",id:"properties-1",level:3},{value:"Type Parameters",id:"type-parameters",level:3},{value:"Return values",id:"return-values",level:3},{value:"Example",id:"example",level:2},{value:"Infinite Loading Example",id:"infinite-loading-example",level:2}],V=e=>function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",t)},A=V("PropTag"),M=V("PropsTable"),H=V("CodeSandboxExample"),Q={toc:F};function X(e){var{components:t}=e,n=I(e,["components"]);return(0,r.kt)("wrapper",D(function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{},r=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(r=r.concat(Object.getOwnPropertySymbols(n).filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable})))),r.forEach((function(t){q(e,t,n[t])}))}return e}({},Q,n),{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"useSelect")," hook allows you to manage Ant Design's ",(0,r.kt)("a",{parentName:"p",href:"https://ant.design/components/select"},(0,r.kt)("inlineCode",{parentName:"a"},"<Select>"))," component when the records in a resource needs to be used as select options."),(0,r.kt)("p",null,"This hook uses the ",(0,r.kt)("inlineCode",{parentName:"p"},"useList")," hook for fetching data."),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"For more information, refer to the ",(0,r.kt)("a",{parentName:"p",href:"/docs/data/hooks/use-list"},"useList documentation ","\u2192"))),(0,r.kt)("h2",{id:"usage"},"Usage"),(0,r.kt)("p",null,"Here is a basic example that uses the ",(0,r.kt)("inlineCode",{parentName:"p"},"useSelect")," hook."),(0,r.kt)(s,{mdxType:"BasicUsageLivePreview"}),(0,r.kt)("h2",{id:"realtime-updates"},"Realtime Updates"),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("a",{parentName:"p",href:"/docs/realtime/live-provider"},(0,r.kt)("inlineCode",{parentName:"a"},"LiveProvider"))," is required for this prop to work.")),(0,r.kt)("p",null,"When the ",(0,r.kt)("inlineCode",{parentName:"p"},"useSelect")," hook is mounted, it passes some parameters (",(0,r.kt)("inlineCode",{parentName:"p"},"channel"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"resource")," etc.) to the ",(0,r.kt)("inlineCode",{parentName:"p"},"subscribe")," method from the ",(0,r.kt)("inlineCode",{parentName:"p"},"liveProvider")," that allow you to subscribe to live updates."),(0,r.kt)("h2",{id:"properties"},"Properties"),(0,r.kt)("h3",{id:"resource-"},"resource ",(0,r.kt)(A,{required:!0,mdxType:"PropTag"})),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"resource")," will be passed to the ",(0,r.kt)("inlineCode",{parentName:"p"},"getList")," method from the ",(0,r.kt)("inlineCode",{parentName:"p"},"dataProvider")," as parameter via the ",(0,r.kt)("inlineCode",{parentName:"p"},"useList")," hook. The parameter is usually used as an API endpoint path but it all depends on how you handle the ",(0,r.kt)("inlineCode",{parentName:"p"},"resource")," in the ",(0,r.kt)("inlineCode",{parentName:"p"},"getList")," method."),(0,r.kt)("p",null,"See the ",(0,r.kt)("a",{parentName:"p",href:"/docs/data/data-provider"},"creating a data provider documentation")," for an example of how resource are handled."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},'useSelect({\n  resource: "categories",\n});\n')),(0,r.kt)("p",null,"If you have multiple resources with the same name, you can pass the ",(0,r.kt)("inlineCode",{parentName:"p"},"identifier")," instead of the ",(0,r.kt)("inlineCode",{parentName:"p"},"name")," of the resource. It will only be used as the main matching key for the resource, data provider methods will still work with the ",(0,r.kt)("inlineCode",{parentName:"p"},"name")," of the resource defined in the ",(0,r.kt)("inlineCode",{parentName:"p"},"<Refine/>")," component."),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"For more information, refer to the ",(0,r.kt)("a",{parentName:"p",href:"/docs/core/refine-component#identifier"},(0,r.kt)("inlineCode",{parentName:"a"},"identifier")," section of the ",(0,r.kt)("inlineCode",{parentName:"a"},"<Refine/>")," component documentation ","\u2192"))),(0,r.kt)("h3",{id:"optionlabel-and-optionvalue"},"optionLabel and optionValue"),(0,r.kt)("p",null,"Allows you to change the ",(0,r.kt)("inlineCode",{parentName:"p"},"value")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"label")," of your options.\nDefault values are ",(0,r.kt)("inlineCode",{parentName:"p"},'optionLabel = "title"')," and ",(0,r.kt)("inlineCode",{parentName:"p"},'optionValue = "id"')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},'useSelect<ICategory>({\n    resource: "products",\n    optionLabel: "name"\n    optionValue: "productId"\n});\n')),(0,r.kt)("p",null,"These properties also support nested property access with ",(0,r.kt)("a",{parentName:"p",href:"https://lodash.com/docs/4.17.15#get"},"Object path")," syntax."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},'const { options } = useSelect({\n  resource: "categories",\n  optionLabel: "nested.title",\n  optionValue: "nested.id",\n});\n')),(0,r.kt)("p",null,"It's also possible to pass function to these props. These functions will receive ",(0,r.kt)("inlineCode",{parentName:"p"},"item")," argument."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"const { options } = useSelect({\n  optionLabel: (item) => `${item.firstName} ${item.lastName}`,\n  optionValue: (item) => item.id,\n});\n")),(0,r.kt)("h3",{id:"searchfield"},"searchField"),(0,r.kt)("p",null,"Can be used to specify which field will be searched with value given to ",(0,r.kt)("inlineCode",{parentName:"p"},"onSearch")," function."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},'const { onSearch } = useSelect({ searchField: "name" });\n\nonSearch("John"); // Searchs by `name` field with value John.\n')),(0,r.kt)("p",null,"By default, it uses ",(0,r.kt)("inlineCode",{parentName:"p"},"optionLabel"),"'s value, if ",(0,r.kt)("inlineCode",{parentName:"p"},"optionLabel")," is a string. Uses ",(0,r.kt)("inlineCode",{parentName:"p"},"title")," field otherwise."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},'// When `optionLabel` is string.\nconst { onSearch } = useSelect({ optionLabel: "name" });\n\nonSearch("John"); // Searchs by `name` field with value John.\n\n// When `optionLabel` is function.\nconst { onSearch } = useSelect({\n  optionLabel: (item) => `${item.id} - ${item.name}`,\n});\n\nonSearch("John"); // Searchs by `title` field with value John.\n')),(0,r.kt)("h3",{id:"sorters"},"sorters"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"sorters")," prop allows you to show the options in the desired order. It will be passed to the ",(0,r.kt)("inlineCode",{parentName:"p"},"getList")," method from the ",(0,r.kt)("inlineCode",{parentName:"p"},"dataProvider")," as parameter via the ",(0,r.kt)("inlineCode",{parentName:"p"},"useList")," hook and used to send sort query parameters to the API."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},'useSelect({\n  sorters: [\n    {\n      field: "title",\n      order: "asc",\n    },\n  ],\n});\n')),(0,r.kt)(b,{mdxType:"SortLivePreview"}),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"For more information, refer to the ",(0,r.kt)("a",{parentName:"p",href:"/docs/core/interface-references#crudsorting"},(0,r.kt)("inlineCode",{parentName:"a"},"CrudSorting")," interface documentation ","\u2192"))),(0,r.kt)("h3",{id:"filters"},"filters"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"filters")," is used to filter the options you are showing. ",(0,r.kt)("inlineCode",{parentName:"p"},"filters")," will be passed to the ",(0,r.kt)("inlineCode",{parentName:"p"},"getList")," method from the ",(0,r.kt)("inlineCode",{parentName:"p"},"dataProvider")," as parameter via the ",(0,r.kt)("inlineCode",{parentName:"p"},"useList")," hook and used to send filter query parameters to the API."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},'useSelect({\n  filters: [\n    {\n      field: "isActive",\n      operator: "eq",\n      value: true,\n    },\n  ],\n});\n')),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"For more information, refer to the ",(0,r.kt)("a",{parentName:"p",href:"/docs/core/interface-references#crudfilters"},(0,r.kt)("inlineCode",{parentName:"a"},"CrudFilters")," interface documentation ","\u2192"))),(0,r.kt)("h3",{id:"defaultvalue"},"defaultValue"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"defaultValue")," is a property that can be used to not only set default options for a ",(0,r.kt)("inlineCode",{parentName:"p"},"<select>")," component but also add extra options."),(0,r.kt)("p",null,"However, issues may arise when the ",(0,r.kt)("inlineCode",{parentName:"p"},"<select>")," component has many entries and pagination is required. In such cases, the ",(0,r.kt)("inlineCode",{parentName:"p"},"defaultValue")," might not be visible among the currently displayed options, which could cause the ",(0,r.kt)("inlineCode",{parentName:"p"},"<select>")," component to malfunction."),(0,r.kt)("p",null,"To prevent this, a separate ",(0,r.kt)("inlineCode",{parentName:"p"},"useMany")," query is sent to the backend carrying the ",(0,r.kt)("inlineCode",{parentName:"p"},"defaultValue")," and added to the options of the ",(0,r.kt)("inlineCode",{parentName:"p"},"<select>")," component, ensuring that the default values are always present in the current array of options."),(0,r.kt)("p",null,"Since the ",(0,r.kt)("inlineCode",{parentName:"p"},"useMany")," query is used to query the necessary data, the ",(0,r.kt)("inlineCode",{parentName:"p"},"defaultValue")," can be a single value or an array of values like the following:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"useSelect({\n  defaultValue: 1, // or [1, 2]\n});\n")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"For more information, refer to the ",(0,r.kt)("a",{parentName:"p",href:"/docs/data/hooks/use-many"},(0,r.kt)("inlineCode",{parentName:"a"},"useMany")," documentation ","\u2192"))),(0,r.kt)("h3",{id:"debounce"},"debounce"),(0,r.kt)("p",null,"This prop allows us to ",(0,r.kt)("inlineCode",{parentName:"p"},"debounce")," the ",(0,r.kt)("inlineCode",{parentName:"p"},"onSearch")," function."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},'useSelect({\n  resource: "categories",\n  debounce: 500,\n});\n')),(0,r.kt)("h3",{id:"queryoptions"},"queryOptions"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"queryOptions")," is used to pass additional options to the ",(0,r.kt)("inlineCode",{parentName:"p"},"useQuery")," hook. It is useful when you want to pass additional options to the ",(0,r.kt)("inlineCode",{parentName:"p"},"useQuery")," hook."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"useSelect({\n  queryOptions: {\n    retry: 3,\n  },\n});\n")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"For more information, refer to the ",(0,r.kt)("a",{parentName:"p",href:"https://tanstack.com/query/v4/docs/react/reference/useQuery"},(0,r.kt)("inlineCode",{parentName:"a"},"useQuery")," documentation ","\u2192"))),(0,r.kt)("h3",{id:"pagination"},"pagination"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"pagination")," will be passed to the ",(0,r.kt)("inlineCode",{parentName:"p"},"getList")," method from the ",(0,r.kt)("inlineCode",{parentName:"p"},"dataProvider")," as parameter. It is used to send pagination query parameters to the API."),(0,r.kt)("h4",{id:"current"},"current"),(0,r.kt)("p",null,"You can pass the ",(0,r.kt)("inlineCode",{parentName:"p"},"current")," page number to the ",(0,r.kt)("inlineCode",{parentName:"p"},"pagination")," property."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"useSelect({\n  pagination: {\n    current: 2,\n  },\n});\n")),(0,r.kt)("h4",{id:"pagesize"},"pageSize"),(0,r.kt)("p",null,"You can pass the ",(0,r.kt)("inlineCode",{parentName:"p"},"pageSize")," to the ",(0,r.kt)("inlineCode",{parentName:"p"},"pagination")," property."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"useSelect({\n  pagination: {\n    pageSize: 20,\n  },\n});\n")),(0,r.kt)("h4",{id:"mode"},"mode"),(0,r.kt)("p",null,"It can be ",(0,r.kt)("inlineCode",{parentName:"p"},'"off"'),", ",(0,r.kt)("inlineCode",{parentName:"p"},'"client"')," or ",(0,r.kt)("inlineCode",{parentName:"p"},'"server"'),". It is used to determine whether to use server-side pagination or not."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},'useSelect({\n  pagination: {\n    mode: "off",\n  },\n});\n')),(0,r.kt)("h3",{id:"defaultvaluequeryoptions"},"defaultValueQueryOptions"),(0,r.kt)("p",null,"When the ",(0,r.kt)("inlineCode",{parentName:"p"},"defaultValue")," property is given, the ",(0,r.kt)("inlineCode",{parentName:"p"},"useMany")," data hook is called for the selected records. ",(0,r.kt)("inlineCode",{parentName:"p"},"defaultValueQueryOptions")," allows you to change the options of this query."),(0,r.kt)("p",null,"If ",(0,r.kt)("inlineCode",{parentName:"p"},"defaultValue")," property is not given, the values given in the ",(0,r.kt)("inlineCode",{parentName:"p"},"queryOptions")," will be used instead."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},'const { options } = useSelect({\n  resource: "categories",\n  defaultValueQueryOptions: {\n    onSuccess: (data) => {\n      console.log("triggers when on query return on success");\n    },\n  },\n});\n')),(0,r.kt)("h3",{id:"onsearch"},"onSearch"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"onSearch")," allows the addittion of ",(0,r.kt)("inlineCode",{parentName:"p"},"AutoComplete")," to the ",(0,r.kt)("inlineCode",{parentName:"p"},"options"),"."),(0,r.kt)(m,{mdxType:"OnSearchLivePreview"}),(0,r.kt)("p",null,"If ",(0,r.kt)("inlineCode",{parentName:"p"},"onSearch")," is used, it will override the existing ",(0,r.kt)("inlineCode",{parentName:"p"},"filters"),"."),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"For more information, refer to the ",(0,r.kt)("a",{parentName:"p",href:"/docs/core/interface-references#crudfilters"},(0,r.kt)("inlineCode",{parentName:"a"},"CrudFilters")," interface documentation ","\u2192"))),(0,r.kt)("h4",{id:"client-side-filtering"},"Client-side filtering"),(0,r.kt)("p",null,"Sometimes, you may want to filter the options on the client-side. You can do this by passing the ",(0,r.kt)("inlineCode",{parentName:"p"},"onSearch")," function as ",(0,r.kt)("inlineCode",{parentName:"p"},"undefined")," and setting ",(0,r.kt)("inlineCode",{parentName:"p"},"filterOption")," to ",(0,r.kt)("inlineCode",{parentName:"p"},"true"),". You can also set ",(0,r.kt)("inlineCode",{parentName:"p"},"optionFilterProp")," to ",(0,r.kt)("inlineCode",{parentName:"p"},"label")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"value")," to filter the options by label or value respectively."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},'const { selectProps } = useSelect({\n  resource: "categories",\n});\n\n<Select\n  {...selectProps}\n  onSearch={undefined}\n  filterOption={true}\n  optionFilterProp="label" // or "value"\n/>;\n')),(0,r.kt)("h3",{id:"meta"},"meta"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"meta")," is a special property that can be used to pass additional information to data provider methods for the following purposes:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Customizing the data provider methods for specific use cases."),(0,r.kt)("li",{parentName:"ul"},"Generating GraphQL queries using plain JavaScript Objects (JSON).")),(0,r.kt)("p",null,"In the following example, we pass the ",(0,r.kt)("inlineCode",{parentName:"p"},"headers")," property in the ",(0,r.kt)("inlineCode",{parentName:"p"},"meta")," object to the ",(0,r.kt)("inlineCode",{parentName:"p"},"create")," method. With similar logic, you can pass any properties to specifically handle the data provider methods."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},'useSelect({\n  // highlight-start\n  meta: {\n    headers: { "x-meta-data": "true" },\n  },\n  // highlight-end\n});\n\nconst myDataProvider = {\n  //...\n  getList: async ({\n    resource,\n    pagination,\n    sorters,\n    filters,\n    // highlight-next-line\n    meta,\n  }) => {\n    // highlight-next-line\n    const headers = meta?.headers ?? {};\n    const url = `${apiUrl}/${resource}`;\n    //...\n    //...\n    // highlight-next-line\n    const { data, headers } = await httpClient.get(`${url}`, { headers });\n    return {\n      data,\n    };\n  },\n  //...\n};\n')),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"For more information, refer to the ",(0,r.kt)("a",{parentName:"p",href:"/docs/guides-concepts/general-concepts/#meta-concept"},(0,r.kt)("inlineCode",{parentName:"a"},"meta")," section of the General Concepts documentation ","\u2192"))),(0,r.kt)("h3",{id:"dataprovidername"},"dataProviderName"),(0,r.kt)("p",null,"If there is more than one ",(0,r.kt)("inlineCode",{parentName:"p"},"dataProvider"),", you can specify which one to use by passing the ",(0,r.kt)("inlineCode",{parentName:"p"},"dataProviderName")," prop. It is useful when you have different data providers for different resources."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},'useSelect({\n  dataProviderName: "second-data-provider",\n});\n')),(0,r.kt)("h3",{id:"successnotification"},"successNotification"),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("a",{parentName:"p",href:"/docs/notification/notification-provider"},(0,r.kt)("inlineCode",{parentName:"a"},"NotificationProvider"))," is required for this prop to work.")),(0,r.kt)("p",null,"After data is fetched successfully, ",(0,r.kt)("inlineCode",{parentName:"p"},"useSelect")," can call the ",(0,r.kt)("inlineCode",{parentName:"p"},"open")," function from ",(0,r.kt)("inlineCode",{parentName:"p"},"NotificationProvider")," to show a success notification. This prop allows you to customize the success notification message"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},'useSelect({\n  successNotification: (data, values, resource) => {\n    return {\n      message: `${data.title} Successfully fetched.`,\n      description: "Success with no errors",\n      type: "success",\n    };\n  },\n});\n')),(0,r.kt)("h3",{id:"errornotification"},"errorNotification"),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("a",{parentName:"p",href:"/docs/notification/notification-provider"},(0,r.kt)("inlineCode",{parentName:"a"},"NotificationProvider"))," is required for this prop to work.")),(0,r.kt)("p",null,"After data fetching is failed, ",(0,r.kt)("inlineCode",{parentName:"p"},"useSelect")," will call the ",(0,r.kt)("inlineCode",{parentName:"p"},"open")," function from ",(0,r.kt)("inlineCode",{parentName:"p"},"NotificationProvider")," to show an error notification. This prop allows you to customize the error notification message"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},'useSelect({\n  errorNotification: (data, values, resource) => {\n    return {\n      message: `Something went wrong when getting ${data.id}`,\n      description: "Error",\n      type: "error",\n    };\n  },\n});\n')),(0,r.kt)("h3",{id:"livemode"},"liveMode"),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("a",{parentName:"p",href:"/docs/realtime/live-provider"},(0,r.kt)("inlineCode",{parentName:"a"},"LiveProvider"))," is required for this prop to work.")),(0,r.kt)("p",null,'This property determines whether to update data automatically ("auto") or not ("manual") if a related live event is received. It can be used to update and show data in Realtime throughout your app.'),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},'useSelect({\n  liveMode: "auto",\n});\n')),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"For more information, refer to the ",(0,r.kt)("a",{parentName:"p",href:"/docs/realtime/live-provider#livemode"},"Live / Realtime documentation ","\u2192"))),(0,r.kt)("h3",{id:"onliveevent"},"onLiveEvent"),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("a",{parentName:"p",href:"/docs/realtime/live-provider"},(0,r.kt)("inlineCode",{parentName:"a"},"LiveProvider"))," is required for this prop to work.")),(0,r.kt)("p",null,"The callback function that is executed when new events from a subscription are arrived."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"useSelect({\n  onLiveEvent: (event) => {\n    console.log(event);\n  },\n});\n")),(0,r.kt)("h3",{id:"liveparams"},"liveParams"),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("a",{parentName:"p",href:"/docs/realtime/live-provider"},(0,r.kt)("inlineCode",{parentName:"a"},"LiveProvider"))," is required for this prop to work.")),(0,r.kt)("p",null,"Params to pass to liveProvider's ",(0,r.kt)("a",{parentName:"p",href:"/docs/realtime/live-provider#subscribe"},"subscribe")," method."),(0,r.kt)("h3",{id:"overtimeoptions"},"overtimeOptions"),(0,r.kt)("p",null,"If you want loading overtime for the request, you can pass the ",(0,r.kt)("inlineCode",{parentName:"p"},"overtimeOptions")," prop to the this hook. It is useful when you want to show a loading indicator when the request takes too long.\n",(0,r.kt)("inlineCode",{parentName:"p"},"interval")," is the time interval in milliseconds while ",(0,r.kt)("inlineCode",{parentName:"p"},"onInterval")," is the function that will be called on each interval."),(0,r.kt)("p",null,"Return ",(0,r.kt)("inlineCode",{parentName:"p"},"overtime")," object from this hook. ",(0,r.kt)("inlineCode",{parentName:"p"},"elapsedTime")," is the elapsed time in milliseconds. It becomes ",(0,r.kt)("inlineCode",{parentName:"p"},"undefined")," when the request is completed."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"const { overtime } = useSelect({\n  //...\n  overtimeOptions: {\n    interval: 1000,\n    onInterval(elapsedInterval) {\n      console.log(elapsedInterval);\n    },\n  },\n});\n\nconsole.log(overtime.elapsedTime); // undefined, 1000, 2000, 3000 4000, ...\n\n// You can use it like this:\n{\n  elapsedTime >= 4000 && <div>this takes a bit longer than expected</div>;\n}\n")),(0,r.kt)("h3",{id:"sort-"},(0,r.kt)("del",{parentName:"h3"},"sort")," ",(0,r.kt)(A,{deprecated:!0,mdxType:"PropTag"})),(0,r.kt)("p",null,"Use ",(0,r.kt)("inlineCode",{parentName:"p"},"sorters")," instead."),(0,r.kt)("h3",{id:"haspagination-"},(0,r.kt)("del",{parentName:"h3"},"hasPagination")," ",(0,r.kt)(A,{deprecated:!0,mdxType:"PropTag"})),(0,r.kt)("p",null,"Use ",(0,r.kt)("inlineCode",{parentName:"p"},"pagination.mode")," instead."),(0,r.kt)("h2",{id:"faq"},"FAQ"),(0,r.kt)("h3",{id:"how-to-add-search-to-options-autocomplete"},"How to add search to options (Autocomplete)?"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/data/hooks/use-select#onsearch"},(0,r.kt)("inlineCode",{parentName:"a"},"onSearch"))," is a function that is used to set the search value. It is useful when you want to search for a specific value. A simple example of this is shown below."),(0,r.kt)(m,{mdxType:"OnSearchLivePreview"}),(0,r.kt)("h3",{id:"how-to-ensure-defaultvalue-is-included-in-the-options"},"How to ensure ",(0,r.kt)("inlineCode",{parentName:"h3"},"defaultValue")," is included in the options?"),(0,r.kt)("p",null,"In some cases we only have ",(0,r.kt)("inlineCode",{parentName:"p"},"id"),", it may be necessary to show it selected in the selection box. This hook sends the request via ",(0,r.kt)("a",{parentName:"p",href:"/docs/data/hooks/use-many"},(0,r.kt)("inlineCode",{parentName:"a"},"useMany")),", gets the data and mark as selected."),(0,r.kt)(w,{mdxType:"DefaultValueLivePreview"}),(0,r.kt)("h3",{id:"how-to-change-the-label-and-value-properties-in-options"},"How to change the ",(0,r.kt)("inlineCode",{parentName:"h3"},"label")," and ",(0,r.kt)("inlineCode",{parentName:"h3"},"value")," properties in options?"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/data/hooks/use-select#optionlabel-and-optionvalue"},(0,r.kt)("inlineCode",{parentName:"a"},"optionLabel")," and ",(0,r.kt)("inlineCode",{parentName:"a"},"optionValue"))," are used to change the value of your options.\nThe default values are ",(0,r.kt)("inlineCode",{parentName:"p"},'optionsLabel="title"')," and ",(0,r.kt)("inlineCode",{parentName:"p"},'optionsValue="id"'),"."),(0,r.kt)("p",null,"To change to ",(0,r.kt)("inlineCode",{parentName:"p"},"name")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"categoryId"),";"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},'useSelect({\n  optionLabel: "name",\n  optionValue: "categoryId",\n});\n')),(0,r.kt)("h3",{id:"can-i-create-the-options-manually"},"Can I create the options manually?"),(0,r.kt)("p",null,"Sometimes it may not be enough to create ",(0,r.kt)("inlineCode",{parentName:"p"},"optionLabel")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"optionValue")," options. In this case we create options with ",(0,r.kt)("inlineCode",{parentName:"p"},"queryResult"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"const { queryResult } = useSelect();\n\nconst options = queryResult.data?.data.map((item) => ({\n  label: item.title,\n  value: item.id,\n}));\n\nreturn <Select options={options} />;\n")),(0,r.kt)("h3",{id:"how-do-i-use-it-with-crud-components-and-useform"},"How do I use it with ",(0,r.kt)("inlineCode",{parentName:"h3"},"CRUD")," components and ",(0,r.kt)("inlineCode",{parentName:"h3"},"useForm"),"?"),(0,r.kt)(x,{mdxType:"CrudLivePreview"}),(0,r.kt)("h2",{id:"api-reference"},"API Reference"),(0,r.kt)("h3",{id:"properties-1"},"Properties"),(0,r.kt)(M,{module:"@refinedev/antd/useSelect",mdxType:"PropsTable"}),(0,r.kt)("h3",{id:"type-parameters"},"Type Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Property"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Default"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"TQueryFnData"),(0,r.kt)("td",{parentName:"tr",align:null},"Result data returned by the query function. Extends ",(0,r.kt)("a",{parentName:"td",href:"/docs/core/interface-references#baserecord"},(0,r.kt)("inlineCode",{parentName:"a"},"BaseRecord"))),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/docs/core/interface-references#baserecord"},(0,r.kt)("inlineCode",{parentName:"a"},"BaseRecord"))),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/docs/core/interface-references#baserecord"},(0,r.kt)("inlineCode",{parentName:"a"},"BaseRecord")))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"TError"),(0,r.kt)("td",{parentName:"tr",align:null},"Custom error object that extends ",(0,r.kt)("a",{parentName:"td",href:"/docs/core/interface-references#httperror"},(0,r.kt)("inlineCode",{parentName:"a"},"HttpError"))),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/docs/core/interface-references#httperror"},(0,r.kt)("inlineCode",{parentName:"a"},"HttpError"))),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/docs/core/interface-references#httperror"},(0,r.kt)("inlineCode",{parentName:"a"},"HttpError")))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"TData"),(0,r.kt)("td",{parentName:"tr",align:null},"Result data returned by the ",(0,r.kt)("inlineCode",{parentName:"td"},"select")," function. Extends ",(0,r.kt)("a",{parentName:"td",href:"/docs/core/interface-references#baserecord"},(0,r.kt)("inlineCode",{parentName:"a"},"BaseRecord")),". If not specified, the value of ",(0,r.kt)("inlineCode",{parentName:"td"},"TQueryFnData")," will be used as the default value."),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/docs/core/interface-references#baserecord"},(0,r.kt)("inlineCode",{parentName:"a"},"BaseRecord"))),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"TQueryFnData"))))),(0,r.kt)("h3",{id:"return-values"},"Return values"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Property"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"selectProps"),(0,r.kt)("td",{parentName:"tr",align:null},"Ant design Select props"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"https://ant.design/components/select/#API"},(0,r.kt)("inlineCode",{parentName:"a"},"Select")))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"queryResult"),(0,r.kt)("td",{parentName:"tr",align:null},"Result of the query of a record"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"https://react-query.tanstack.com/reference/useQuery"},(0,r.kt)("inlineCode",{parentName:"a"},"QueryObserverResult<{ data: TData }>")))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"defaultValueQueryResult"),(0,r.kt)("td",{parentName:"tr",align:null},"Result of the query of a ",(0,r.kt)("inlineCode",{parentName:"td"},"defaultValue")," record"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"https://react-query.tanstack.com/reference/useQuery"},(0,r.kt)("inlineCode",{parentName:"a"},"QueryObserverResult<{ data: TData }>")))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"defaultValueQueryOnSuccess"),(0,r.kt)("td",{parentName:"tr",align:null},"Default value onSuccess method"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"() => void"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"overtime"),(0,r.kt)("td",{parentName:"tr",align:null},"Overtime loading props"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"{ elapsedTime?: number }"))))),(0,r.kt)("h2",{id:"example"},"Example"),(0,r.kt)(H,{path:"field-antd-use-select-basic",mdxType:"CodeSandboxExample"}),(0,r.kt)("h2",{id:"infinite-loading-example"},"Infinite Loading Example"),(0,r.kt)(H,{path:"field-antd-use-select-infinite",mdxType:"CodeSandboxExample"}))}X.isMDXComponent=!0}}]);