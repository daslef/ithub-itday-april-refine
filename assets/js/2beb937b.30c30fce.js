"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[94080],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>c});var a=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=a.createContext({}),d=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=d(e.components);return a.createElement(s.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,s=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),u=d(n),c=o,k=u["".concat(s,".").concat(c)]||u[c]||m[c]||r;return n?a.createElement(k,l(l({ref:t},p),{},{components:n})):a.createElement(k,l({ref:t},p))}));function c(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,l=new Array(r);l[0]=u;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:o,l[1]=i;for(var d=2;d<r;d++)l[d]=n[d];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},61773:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>s,default:()=>b,frontMatter:()=>i,metadata:()=>d,toc:()=>m});n(67294);var a=n(3905);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){return t=null!=t?t:{},Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):function(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))})),e}function l(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}const i={title:"useModalForm"},s=void 0,d={unversionedId:"ui-integrations/ant-design/hooks/use-modal-form/index",id:"ui-integrations/ant-design/hooks/use-modal-form/index",title:"useModalForm",description:"The useModalForm hook allows you to manage a form within a `. It returns Ant Design ` and Modal components props.",source:"@site/docs/ui-integrations/ant-design/hooks/use-modal-form/index.md",sourceDirName:"ui-integrations/ant-design/hooks/use-modal-form",slug:"/ui-integrations/ant-design/hooks/use-modal-form/",permalink:"/ithub-itday-april-refine/docs/ui-integrations/ant-design/hooks/use-modal-form/",draft:!1,editUrl:"https://github.com/refinedev/refine/tree/master/documentation/docs/ui-integrations/ant-design/hooks/use-modal-form/index.md",tags:[],version:"current",frontMatter:{title:"useModalForm"},sidebar:"mainSidebar",previous:{title:"useDrawerForm",permalink:"/ithub-itday-april-refine/docs/ui-integrations/ant-design/hooks/use-drawer-form/"},next:{title:"useStepsForm",permalink:"/ithub-itday-april-refine/docs/ui-integrations/ant-design/hooks/use-steps-form/"}},p={},m=[{value:"Usage",id:"usage",level:2},{value:"Properties",id:"properties",level:2},{value:"syncWithLocation",id:"syncwithlocation",level:3},{value:"defaultFormValues",id:"defaultformvalues",level:3},{value:"defaultVisible",id:"defaultvisible",level:3},{value:"autoSubmitClose",id:"autosubmitclose",level:3},{value:"autoResetForm",id:"autoresetform",level:3},{value:"warnWhenUnsavedChanges",id:"warnwhenunsavedchanges",level:3},{value:"overtimeOptions",id:"overtimeoptions",level:3},{value:"autoSave",id:"autosave",level:3},{value:"enabled",id:"enabled",level:4},{value:"debounce",id:"debounce",level:4},{value:"onFinish",id:"onfinish",level:4},{value:"invalidateOnUnmount",id:"invalidateonunmount",level:4},{value:"invalidateOnClose",id:"invalidateonclose",level:4},{value:"Return Values",id:"return-values",level:2},{value:"formProps",id:"formprops",level:3},{value:"modalProps",id:"modalprops",level:3},{value:"title",id:"title",level:4},{value:"okText",id:"oktext",level:4},{value:"cancelText",id:"canceltext",level:4},{value:"width",id:"width",level:4},{value:"forceRender",id:"forcerender",level:4},{value:"okButtonProps",id:"okbuttonprops",level:4},{value:"onOk",id:"onok",level:4},{value:"onCancel",id:"oncancel",level:4},{value:"<del>visible</del> <PropTag deprecated />",id:"visible-",level:4},{value:"open",id:"open",level:3},{value:"close",id:"close",level:3},{value:"submit",id:"submit",level:3},{value:"show",id:"show",level:3},{value:"overtime",id:"overtime",level:3},{value:"autoSaveProps",id:"autosaveprops",level:3},{value:"FAQ",id:"faq",level:2},{value:"How can I change the form data before submitting it to the API?",id:"how-can-i-change-the-form-data-before-submitting-it-to-the-api",level:3},{value:"API Reference",id:"api-reference",level:2},{value:"Properties",id:"properties-1",level:3},{value:"Type Parameters",id:"type-parameters",level:3},{value:"Return Value",id:"return-value",level:3},{value:"Example",id:"example",level:2}],u=e=>function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,a.kt)("div",t)},c=u("Tabs"),k=u("TabItem"),h=u("PropTag"),f=u("PropsTable"),N=u("CodeSandboxExample"),g={toc:m};function b(e){var{components:t}=e,n=l(e,["components"]);return(0,a.kt)("wrapper",r(function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{},a=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(a=a.concat(Object.getOwnPropertySymbols(n).filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable})))),a.forEach((function(t){o(e,t,n[t])}))}return e}({},g,n),{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"useModalForm")," hook allows you to manage a form within a ",(0,a.kt)("a",{parentName:"p",href:"https://ant.design/components/modal/"},(0,a.kt)("inlineCode",{parentName:"a"},"<Modal>")),". It returns Ant Design ",(0,a.kt)("a",{parentName:"p",href:"https://ant.design/components/form/"},(0,a.kt)("inlineCode",{parentName:"a"},"<Form>"))," and ",(0,a.kt)("a",{parentName:"p",href:"https://ant.design/components/modal/"},"Modal")," components props."),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"useModalForm")," hook is extended from ",(0,a.kt)("a",{parentName:"p",href:"/docs/ui-integrations/ant-design/hooks/use-form"},(0,a.kt)("inlineCode",{parentName:"a"},"useForm"))," from the ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/refinedev/refine/tree/master/packages/antd"},(0,a.kt)("inlineCode",{parentName:"a"},"@refinedev/antd"))," package. This means that you can use all the features of ",(0,a.kt)("a",{parentName:"p",href:"/docs/ui-integrations/ant-design/hooks/use-form"},(0,a.kt)("inlineCode",{parentName:"a"},"useForm"))," hook."),(0,a.kt)("h2",{id:"usage"},"Usage"),(0,a.kt)("p",null,"We'll show three examples, ",(0,a.kt)("inlineCode",{parentName:"p"},'"create"'),", ",(0,a.kt)("inlineCode",{parentName:"p"},'"edit"')," and ",(0,a.kt)("inlineCode",{parentName:"p"},'"clone"'),". Let's see how ",(0,a.kt)("inlineCode",{parentName:"p"},"useModalForm")," is used in all."),(0,a.kt)(c,{defaultValue:"create",values:[{label:"create",value:"create"},{label:"edit",value:"edit"},{label:"clone",value:"clone"}],mdxType:"Tabs"},(0,a.kt)(k,{value:"create",mdxType:"TabItem"},(0,a.kt)("p",null,"In this example, we will show you how to create a record with ",(0,a.kt)("inlineCode",{parentName:"p"},"useModalForm"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live url=http://localhost:3000/posts",live:!0,url:"http://localhost:3000/posts"},'setInitialRoutes(["/posts"]);\n\n// visible-block-start\n\nimport React from "react";\n\nimport { List, useModalForm, useTable } from "@refinedev/antd";\nimport { Form, Input, Modal, Select, Table } from "antd";\n\nconst PostList: React.FC = () => {\n  const { tableProps } = useTable<IPost>();\n\n  // highlight-start\n  const {\n    modalProps: createModalProps,\n    formProps: createFormProps,\n    show: createModalShow,\n  } = useModalForm<IPost>({\n    action: "create",\n  });\n  // highlight-end\n\n  return (\n    <>\n      <List\n        // createButtonProps allows us to create and manage a button above the table.\n        // This code block makes <Modal> appear when you click the button.\n        createButtonProps={{\n          // highlight-start\n          onClick: () => {\n            createModalShow();\n          },\n          // highlight-end\n        }}\n      >\n        <Table {...tableProps} rowKey="id">\n          <Table.Column dataIndex="id" title="ID" />\n          <Table.Column dataIndex="title" title="Title" />\n          <Table.Column dataIndex="status" title="Status" />\n        </Table>\n      </List>\n      {/* highlight-start */}\n      <Modal {...createModalProps}>\n        <Form {...createFormProps} layout="vertical">\n          <Form.Item\n            label="Title"\n            name="title"\n            rules={[\n              {\n                required: true,\n              },\n            ]}\n          >\n            <Input />\n          </Form.Item>\n          <Form.Item\n            label="Status"\n            name="status"\n            rules={[\n              {\n                required: true,\n              },\n            ]}\n          >\n            <Select\n              options={[\n                {\n                  label: "Published",\n                  value: "published",\n                },\n                {\n                  label: "Draft",\n                  value: "draft",\n                },\n                {\n                  label: "Rejected",\n                  value: "rejected",\n                },\n              ]}\n            />\n          </Form.Item>\n        </Form>\n      </Modal>\n      {/* highlight-end */}\n    </>\n  );\n};\n\ninterface IPost {\n  id: number;\n  title: string;\n  status: "published" | "draft" | "rejected";\n}\n// visible-block-end\n\nsetRefineProps({\n  resources: [\n    {\n      name: "posts",\n      list: PostList,\n    },\n  ],\n});\n\nrender(<RefineAntdDemo />);\n'))),(0,a.kt)(k,{value:"edit",mdxType:"TabItem"},(0,a.kt)("p",null,"Let's learn how to add editing capabilities to records that will be opening form in Modal by using the ",(0,a.kt)("inlineCode",{parentName:"p"},"action")," prop."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live url=http://localhost:3000/posts",live:!0,url:"http://localhost:3000/posts"},'setInitialRoutes(["/posts"]);\n\nimport React from "react";\n\nimport { EditButton, List, useModalForm, useTable } from "@refinedev/antd";\nimport { Form, Input, Modal, Select, Space, Table } from "antd";\n\nconst PostList: React.FC = () => {\n  const { tableProps } = useTable<IPost>();\n\n  // highlight-start\n  const {\n    modalProps: editModalProps,\n    formProps: editFormProps,\n    show: editModalShow,\n  } = useModalForm<IPost>({\n    action: "edit",\n    warnWhenUnsavedChanges: true,\n  });\n  // highlight-end\n\n  return (\n    <>\n      <List>\n        <Table {...tableProps} rowKey="id">\n          <Table.Column dataIndex="id" title="ID" />\n          <Table.Column dataIndex="title" title="Title" />\n          <Table.Column dataIndex="status" title="Status" />\n          <Table.Column<IPost>\n            title="Actions"\n            dataIndex="actions"\n            key="actions"\n            render={(_, record) => (\n              <Space>\n                {/* highlight-start */}\n                <EditButton\n                  hideText\n                  size="small"\n                  recordItemId={record.id}\n                  onClick={() => editModalShow(record.id)}\n                />\n                {/* highlight-end */}\n              </Space>\n            )}\n          />\n        </Table>\n      </List>\n      {/* highlight-start */}\n      <Modal {...editModalProps}>\n        <Form {...editFormProps} layout="vertical">\n          <Form.Item\n            label="Title"\n            name="title"\n            rules={[\n              {\n                required: true,\n              },\n            ]}\n          >\n            <Input />\n          </Form.Item>\n          <Form.Item\n            label="Status"\n            name="status"\n            rules={[\n              {\n                required: true,\n              },\n            ]}\n          >\n            <Select\n              options={[\n                {\n                  label: "Published",\n                  value: "published",\n                },\n                {\n                  label: "Draft",\n                  value: "draft",\n                },\n                {\n                  label: "Rejected",\n                  value: "rejected",\n                },\n              ]}\n            />\n          </Form.Item>\n        </Form>\n      </Modal>\n      {/* highlight-end */}\n    </>\n  );\n};\n\ninterface IPost {\n  id: number;\n  title: string;\n  status: "published" | "draft" | "rejected";\n}\n// visible-block-end\n\nsetRefineProps({\n  resources: [\n    {\n      name: "posts",\n      list: PostList,\n    },\n  ],\n});\n\nrender(<RefineAntdDemo />);\n')),(0,a.kt)("p",null,"Refine doesn't automatically add a ",(0,a.kt)("inlineCode",{parentName:"p"},"<EditButton/>")," to the each record in ",(0,a.kt)("inlineCode",{parentName:"p"},"<PostList>")," which opens the edit form in ",(0,a.kt)("inlineCode",{parentName:"p"},"<Modal>")," when clicked."),(0,a.kt)("p",null,"So, we have to put the ",(0,a.kt)("inlineCode",{parentName:"p"},"<EditButton/>")," on our list. In that way, ",(0,a.kt)("inlineCode",{parentName:"p"},"<Edit>")," form in ",(0,a.kt)("inlineCode",{parentName:"p"},"<Modal>")," can fetch data by the record ",(0,a.kt)("inlineCode",{parentName:"p"},"id"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},'<Table.Column<IPost>\n  title="Actions"\n  dataIndex="actions"\n  key="actions"\n  render={(_value, record) => <EditButton onClick={() => show(record.id)} />}\n/>\n')),(0,a.kt)("p",null,"Don't forget to pass the record ",(0,a.kt)("inlineCode",{parentName:"p"},'"id"')," to ",(0,a.kt)("inlineCode",{parentName:"p"},"show")," to fetch the record data. This is necessary for both ",(0,a.kt)("inlineCode",{parentName:"p"},'"edit"')," and ",(0,a.kt)("inlineCode",{parentName:"p"},'"clone"')," forms.")),(0,a.kt)(k,{value:"clone",mdxType:"TabItem"},(0,a.kt)("p",null,"Let's learn how to add cloning capabilities to records that will be opening form in Modal by using the ",(0,a.kt)("inlineCode",{parentName:"p"},"action")," prop."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live url=http://localhost:3000/posts",live:!0,url:"http://localhost:3000/posts"},'setInitialRoutes(["/posts"]);\n\nimport React from "react";\n\nimport { CloneButton, List, useModalForm, useTable } from "@refinedev/antd";\nimport { Form, Input, Modal, Select, Space, Table } from "antd";\n\nconst PostList: React.FC = () => {\n  const { tableProps } = useTable<IPost>();\n\n  // highlight-start\n  const {\n    modalProps: cloneModalProps,\n    formProps: cloneFormProps,\n    show: cloneModalShow,\n  } = useModalForm<IPost>({\n    action: "clone",\n  });\n  // highlight-end\n\n  return (\n    <>\n      <List>\n        <Table {...tableProps} rowKey="id">\n          <Table.Column dataIndex="id" title="ID" />\n          <Table.Column dataIndex="title" title="Title" />\n          <Table.Column dataIndex="status" title="Status" />\n          <Table.Column<IPost>\n            title="Actions"\n            dataIndex="actions"\n            key="actions"\n            render={(_, record) => (\n              <Space>\n                {/* highlight-start */}\n                <CloneButton\n                  hideText\n                  size="small"\n                  recordItemId={record.id}\n                  onClick={() => cloneModalShow(record.id)}\n                />\n                {/* highlight-end */}\n              </Space>\n            )}\n          />\n        </Table>\n      </List>\n      {/* highlight-start */}\n      <Modal {...cloneModalProps}>\n        <Form {...cloneFormProps} layout="vertical">\n          <Form.Item\n            label="Title"\n            name="title"\n            rules={[\n              {\n                required: true,\n              },\n            ]}\n          >\n            <Input />\n          </Form.Item>\n          <Form.Item\n            label="Status"\n            name="status"\n            rules={[\n              {\n                required: true,\n              },\n            ]}\n          >\n            <Select\n              options={[\n                {\n                  label: "Published",\n                  value: "published",\n                },\n                {\n                  label: "Draft",\n                  value: "draft",\n                },\n                {\n                  label: "Rejected",\n                  value: "rejected",\n                },\n              ]}\n            />\n          </Form.Item>\n        </Form>\n      </Modal>\n      {/* highlight-end */}\n    </>\n  );\n};\n\ninterface IPost {\n  id: number;\n  title: string;\n  status: "published" | "draft" | "rejected";\n}\n// visible-block-end\n\nsetRefineProps({\n  resources: [\n    {\n      name: "posts",\n      list: PostList,\n    },\n  ],\n});\n\nrender(<RefineAntdDemo />);\n')),(0,a.kt)("p",null,"Refine doesn't automatically add a ",(0,a.kt)("inlineCode",{parentName:"p"},"<CloneButton/>")," to the each record in ",(0,a.kt)("inlineCode",{parentName:"p"},"<PostList>")," which opens clone form in ",(0,a.kt)("inlineCode",{parentName:"p"},"<Modal>")," when clicked."),(0,a.kt)("p",null,"So, we have to put the ",(0,a.kt)("inlineCode",{parentName:"p"},"<CloneButton/>")," on our list. In that way, ",(0,a.kt)("inlineCode",{parentName:"p"},"<Clone>")," form in ",(0,a.kt)("inlineCode",{parentName:"p"},"<Modal>")," can fetch data by the record ",(0,a.kt)("inlineCode",{parentName:"p"},"id"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},'<Table.Column<IPost>\n  title="Actions"\n  dataIndex="actions"\n  key="actions"\n  render={(_value, record) => <CloneButton onClick={() => show(record.id)} />}\n/>\n')),(0,a.kt)("p",null,"Don't forget to pass the record id to ",(0,a.kt)("inlineCode",{parentName:"p"},"show")," to fetch the record data. This is necessary for both ",(0,a.kt)("inlineCode",{parentName:"p"},'"edit"')," and ",(0,a.kt)("inlineCode",{parentName:"p"},'"clone"')," forms."))),(0,a.kt)("h2",{id:"properties"},"Properties"),(0,a.kt)("p",null,"All ",(0,a.kt)("a",{parentName:"p",href:"/docs/ui-integrations/ant-design/hooks/use-form"},(0,a.kt)("inlineCode",{parentName:"a"},"useForm"))," props are also available in ",(0,a.kt)("inlineCode",{parentName:"p"},"useModalForm"),". You can find descriptions on the ",(0,a.kt)("a",{parentName:"p",href:"/docs/ui-integrations/ant-design/hooks/use-form#properties"},(0,a.kt)("inlineCode",{parentName:"a"},"useForm")," documentation"),"."),(0,a.kt)("h3",{id:"syncwithlocation"},"syncWithLocation"),(0,a.kt)("p",null,"When ",(0,a.kt)("inlineCode",{parentName:"p"},"syncWithLocation")," is ",(0,a.kt)("inlineCode",{parentName:"p"},"true"),", the drawers visibility state and the ",(0,a.kt)("inlineCode",{parentName:"p"},"id")," of the record will be synced with the URL. It is ",(0,a.kt)("inlineCode",{parentName:"p"},"false")," by default."),(0,a.kt)("p",null,"This property can also be set as an object ",(0,a.kt)("inlineCode",{parentName:"p"},"{ key: string; syncId?: boolean }")," to customize the key of the URL query parameter. ",(0,a.kt)("inlineCode",{parentName:"p"},"id")," will be synced with the URL only if ",(0,a.kt)("inlineCode",{parentName:"p"},"syncId")," is ",(0,a.kt)("inlineCode",{parentName:"p"},"true"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},'const modalForm = useModalForm({\n  syncWithLocation: { key: "my-modal", syncId: true },\n});\n')),(0,a.kt)("h3",{id:"defaultformvalues"},"defaultFormValues"),(0,a.kt)("p",null,"Default values for the form. Use this to pre-populate the form with data that needs to be displayed. This property is only available for ",(0,a.kt)("inlineCode",{parentName:"p"},'"create"')," action."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},'const modalForm = useModalForm({\n  defaultFormValues: {\n    title: "Hello World",\n  },\n});\n')),(0,a.kt)("h3",{id:"defaultvisible"},"defaultVisible"),(0,a.kt)("p",null,"When ",(0,a.kt)("inlineCode",{parentName:"p"},"defaultVisible")," is ",(0,a.kt)("inlineCode",{parentName:"p"},"true"),", the modal will be visible by default. It is ",(0,a.kt)("inlineCode",{parentName:"p"},"false")," by default."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"const modalForm = useModalForm({\n  defaultVisible: true,\n});\n")),(0,a.kt)("h3",{id:"autosubmitclose"},"autoSubmitClose"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"autoSubmitClose")," will make the modal close after a successful submit. It is ",(0,a.kt)("inlineCode",{parentName:"p"},"true")," by default."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"const modalForm = useModalForm({\n  autoSubmitClose: false,\n});\n")),(0,a.kt)("h3",{id:"autoresetform"},"autoResetForm"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"autoResetForm")," will reset the form after a successful submit. It is ",(0,a.kt)("inlineCode",{parentName:"p"},"true")," by default."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"const modalForm = useModalForm({\n  autoResetForm: false,\n});\n")),(0,a.kt)("h3",{id:"warnwhenunsavedchanges"},"warnWhenUnsavedChanges"),(0,a.kt)("p",null,"When set to true, ",(0,a.kt)("inlineCode",{parentName:"p"},"warnWhenUnsavedChanges")," shows a warning when the user tries to leave the page with unsaved changes. It is used to prevent the user from accidentally leaving the page. It is ",(0,a.kt)("inlineCode",{parentName:"p"},"false")," by default"),(0,a.kt)("p",null,"You can also set this value in ",(0,a.kt)("a",{parentName:"p",href:"/docs/core/refine-component#warnwhenunsavedchanges"},(0,a.kt)("inlineCode",{parentName:"a"},"<Refine>"))," component."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"const modalForm = useModalForm({\n  warnWhenUnsavedChanges: true,\n});\n")),(0,a.kt)("h3",{id:"overtimeoptions"},"overtimeOptions"),(0,a.kt)("p",null,"If you want loading overtime for the request, you can pass the ",(0,a.kt)("inlineCode",{parentName:"p"},"overtimeOptions")," prop to the this hook. It is useful when you want to show a loading indicator when the request takes too long.\n",(0,a.kt)("inlineCode",{parentName:"p"},"interval")," is the time interval in milliseconds. ",(0,a.kt)("inlineCode",{parentName:"p"},"onInterval")," is the function that will be called on each interval."),(0,a.kt)("p",null,"Return ",(0,a.kt)("inlineCode",{parentName:"p"},"overtime")," object from this hook. ",(0,a.kt)("inlineCode",{parentName:"p"},"elapsedTime")," is the elapsed time in milliseconds. It becomes ",(0,a.kt)("inlineCode",{parentName:"p"},"undefined")," when the request is completed."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"const { overtime } = useModalForm({\n  //...\n  overtimeOptions: {\n    interval: 1000,\n    onInterval(elapsedInterval) {\n      console.log(elapsedInterval);\n    },\n  },\n});\n\nconsole.log(overtime.elapsedTime); // undefined, 1000, 2000, 3000 4000, ...\n\n// You can use it like this:\n{\n  elapsedTime >= 4000 && <div>this takes a bit longer than expected</div>;\n}\n")),(0,a.kt)("h3",{id:"autosave"},"autoSave"),(0,a.kt)("p",null,"If you want to save the form automatically after some delay when user edits the form, you can pass true to ",(0,a.kt)("inlineCode",{parentName:"p"},"autoSave.enabled")," prop."),(0,a.kt)("p",null,"By default the ",(0,a.kt)("inlineCode",{parentName:"p"},"autoSave")," feature does not invalidate queries. However, you can use the ",(0,a.kt)("inlineCode",{parentName:"p"},"invalidateOnUnmount")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"invalidateOnClose")," props to invalidate queries upon unmount or close."),(0,a.kt)("p",null,"It also supports ",(0,a.kt)("inlineCode",{parentName:"p"},"onMutationSuccess")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"onMutationError")," callback functions. You can use ",(0,a.kt)("inlineCode",{parentName:"p"},"isAutoSave")," parameter to determine whether the mutation is triggered by ",(0,a.kt)("inlineCode",{parentName:"p"},"autoSave")," or not."),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"autoSave")," feature operates exclusively in ",(0,a.kt)("inlineCode",{parentName:"p"},"edit")," mode. Users can take advantage of this feature while editing data, as changes are automatically saved in editing mode. However, when creating new data, manual saving is still required."),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"onMutationSuccess")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"onMutationError")," callbacks will be called after the mutation is successful or failed."),(0,a.kt)("h4",{id:"enabled"},"enabled"),(0,a.kt)("p",null,"To enable the ",(0,a.kt)("inlineCode",{parentName:"p"},"autoSave")," feature, set the ",(0,a.kt)("inlineCode",{parentName:"p"},"enabled")," parameter to ",(0,a.kt)("inlineCode",{parentName:"p"},"true"),". By default, it is ",(0,a.kt)("inlineCode",{parentName:"p"},"false"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"useModalForm({\n  autoSave: {\n    enabled: true,\n  },\n});\n")),(0,a.kt)("h4",{id:"debounce"},"debounce"),(0,a.kt)("p",null,"Set the debounce time for the ",(0,a.kt)("inlineCode",{parentName:"p"},"autoSave")," prop. By default, it is ",(0,a.kt)("inlineCode",{parentName:"p"},"1000")," milliseconds."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"useModalForm({\n  autoSave: {\n    enabled: true,\n    // highlight-next-line\n    debounce: 2000,\n  },\n});\n")),(0,a.kt)("h4",{id:"onfinish"},"onFinish"),(0,a.kt)("p",null,"If you want to modify the data before sending it to the server, you can use ",(0,a.kt)("inlineCode",{parentName:"p"},"onFinish")," callback function."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},'useModalForm({\n  autoSave: {\n    enabled: true,\n    // highlight-start\n    onFinish: (values) => {\n      return {\n        foo: "bar",\n        ...values,\n      };\n    },\n    // highlight-end\n  },\n});\n')),(0,a.kt)("h4",{id:"invalidateonunmount"},"invalidateOnUnmount"),(0,a.kt)("p",null,"This prop is useful when you want to invalidate the ",(0,a.kt)("inlineCode",{parentName:"p"},"list"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"many")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"detail")," queries from the current resource when the hook is unmounted. By default, it invalidates the ",(0,a.kt)("inlineCode",{parentName:"p"},"list"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"many")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"detail")," queries associated with the current resource. Also, You can use the ",(0,a.kt)("inlineCode",{parentName:"p"},"invalidates")," prop to select which queries to invalidate. By default, it is ",(0,a.kt)("inlineCode",{parentName:"p"},"false"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"useModalForm({\n  autoSave: {\n    enabled: true,\n    // highlight-next-line\n    invalidateOnUnmount: true,\n  },\n});\n")),(0,a.kt)("h4",{id:"invalidateonclose"},"invalidateOnClose"),(0,a.kt)("p",null,"This prop is useful when you want to invalidate the ",(0,a.kt)("inlineCode",{parentName:"p"},"list"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"many")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"detail")," queries from the current resource when the modal is closed. By default, it invalidates the ",(0,a.kt)("inlineCode",{parentName:"p"},"list"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"many")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"detail")," queries associated with the current resource. Also, You can use the ",(0,a.kt)("inlineCode",{parentName:"p"},"invalidates")," prop to select which queries to invalidate. By default, it is ",(0,a.kt)("inlineCode",{parentName:"p"},"false"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"useModalForm({\n  autoSave: {\n    enabled: true,\n    // highlight-next-line\n    invalidateOnClose: true,\n  },\n});\n")),(0,a.kt)("h2",{id:"return-values"},"Return Values"),(0,a.kt)("h3",{id:"formprops"},"formProps"),(0,a.kt)("p",null,"It's required to manage ",(0,a.kt)("inlineCode",{parentName:"p"},"<Form>")," state and actions. Under the hood the ",(0,a.kt)("inlineCode",{parentName:"p"},"formProps")," came from ",(0,a.kt)("a",{parentName:"p",href:"/docs/ui-integrations/ant-design/hooks/use-form"},(0,a.kt)("inlineCode",{parentName:"a"},"useForm")),"."),(0,a.kt)("p",null,"It contains the props to manage the ",(0,a.kt)("a",{parentName:"p",href:"https://ant.design/components/form#api"},"Antd ",(0,a.kt)("inlineCode",{parentName:"a"},"<Form>"))," components such as ",(0,a.kt)("a",{parentName:"p",href:"/docs/ui-integrations/ant-design/hooks/use-form#return-values"},(0,a.kt)("inlineCode",{parentName:"a"},"onValuesChange"),", ",(0,a.kt)("inlineCode",{parentName:"a"},"initialValues"),", ",(0,a.kt)("inlineCode",{parentName:"a"},"onFieldsChange"),", ",(0,a.kt)("inlineCode",{parentName:"a"},"onFinish")," etc.")),(0,a.kt)("h3",{id:"modalprops"},"modalProps"),(0,a.kt)("p",null,"The props needed by the ",(0,a.kt)("a",{parentName:"p",href:"https://ant.design/components/modal/"},(0,a.kt)("inlineCode",{parentName:"a"},"<Modal>"))," component."),(0,a.kt)("h4",{id:"title"},"title"),(0,a.kt)("p",null,"Title of the modal. Value is based on resource and action values."),(0,a.kt)("h4",{id:"oktext"},"okText"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"okText")," is the text of the ",(0,a.kt)("inlineCode",{parentName:"p"},'"submit"'),' button within the modal. It is "Save" by default.'),(0,a.kt)("h4",{id:"canceltext"},"cancelText"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"cancelText")," is the text of the ",(0,a.kt)("inlineCode",{parentName:"p"},'"cancel"'),' button within the modal. It is "Cancel" by default.'),(0,a.kt)("h4",{id:"width"},"width"),(0,a.kt)("p",null,"Width of the ",(0,a.kt)("inlineCode",{parentName:"p"},"<Modal>"),". It is ",(0,a.kt)("inlineCode",{parentName:"p"},"1000px")," by default."),(0,a.kt)("h4",{id:"forcerender"},"forceRender"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"forceRender")," renders the ",(0,a.kt)("inlineCode",{parentName:"p"},"<Modal>")," instead of lazy rendering it. It is ",(0,a.kt)("inlineCode",{parentName:"p"},"true")," by default."),(0,a.kt)("h4",{id:"okbuttonprops"},"okButtonProps"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"okButtonProps")," contains all the props needed by the ",(0,a.kt)("inlineCode",{parentName:"p"},'"submit"')," button within the modal (disabled,loading etc.). When ",(0,a.kt)("inlineCode",{parentName:"p"},"okButtonProps.onClick")," is called, it triggers ",(0,a.kt)("inlineCode",{parentName:"p"},"form.submit()"),". You can manually pass these props to your custom button."),(0,a.kt)("h4",{id:"onok"},"onOk"),(0,a.kt)("p",null,"A function that can submit the ",(0,a.kt)("inlineCode",{parentName:"p"},"<Form>")," inside ",(0,a.kt)("inlineCode",{parentName:"p"},"<Modal>"),". It's useful when you want to submit the form manually."),(0,a.kt)("h4",{id:"oncancel"},"onCancel"),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"Same as ",(0,a.kt)("inlineCode",{parentName:"p"},"close"))),(0,a.kt)("p",null,"A function that can close the ",(0,a.kt)("inlineCode",{parentName:"p"},"<Modal>"),". It's useful when you want to close the modal manually."),(0,a.kt)("h4",{id:"visible-"},(0,a.kt)("del",{parentName:"h4"},"visible")," ",(0,a.kt)(h,{deprecated:!0,mdxType:"PropTag"})),(0,a.kt)("p",null,"Please use ",(0,a.kt)("inlineCode",{parentName:"p"},"open")," instead."),(0,a.kt)("h3",{id:"open"},"open"),(0,a.kt)("p",null,"Current visible state of ",(0,a.kt)("inlineCode",{parentName:"p"},"<Modal>"),". Default value depends on ",(0,a.kt)("inlineCode",{parentName:"p"},"defaultVisible")," prop."),(0,a.kt)("h3",{id:"close"},"close"),(0,a.kt)("p",null,"A function that can close the ",(0,a.kt)("inlineCode",{parentName:"p"},"<Modal>"),". It's useful when you want to close the modal manually."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},'const { close, modalProps, formProps, onFinish } = useModalForm();\n\nconst onFinishHandler = (values) => {\n  onFinish(values);\n  close();\n};\n\n// ---\n\nreturn (\n  <Modal {...modalProps}>\n    <Form {...formProps} onFinish={onFinishHandler} layout="vertical">\n      <Form.Item label="Title" name="title">\n        <Input />\n      </Form.Item>\n    </Form>\n  </Modal>\n);\n')),(0,a.kt)("h3",{id:"submit"},"submit"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"submit")," is a function that can submit the form. It's useful when you want to submit the form manually."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},'const { modalProps, formProps, submit } = useModalForm();\n\n// ---\n\nreturn (\n  <Modal\n    {...modalProps}\n    footer={[\n      <Button key="submit" type="primary" onClick={submit}>\n        Submit\n      </Button>,\n    ]}\n  >\n    <Form {...formProps} layout="vertical">\n      <Form.Item label="Title" name="title">\n        <Input />\n      </Form.Item>\n    </Form>\n  </Modal>\n);\n')),(0,a.kt)("h3",{id:"show"},"show"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"show")," is a function that can show the modal."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},'const { modalProps, formProps, show } = useModalForm();\n\nreturn (\n  <>\n    <Button type="primary" onClick={() => show()}>\n      Show Modal\n    </Button>\n    <Modal\n      {...modalProps}\n      footer={[\n        <Button key="submit" type="primary" onClick={submit}>\n          Submit\n        </Button>,\n      ]}\n    >\n      <Form {...formProps} onFinish={onFinishHandler} layout="vertical">\n        <Form.Item label="Title" name="title">\n          <Input />\n        </Form.Item>\n      </Form>\n    </Modal>\n  </>\n);\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},'const { modalProps, formProps } = useModalForm();\n\n// ---\n\nreturn (\n  <Modal\n    {...modalProps}\n    footer={\n      <Button\n        onClick={(\n          e: React.MouseEvent<HTMLAnchorElement, MouseEvent> &\n            React.MouseEvent<HTMLButtonElement, MouseEvent>,\n        ) => modalProps.onCancel(e)}\n      >\n        Cancel\n      </Button>\n    }\n  >\n    <Form {...formProps} layout="vertical">\n      <Form.Item label="Title" name="title">\n        <Input />\n      </Form.Item>\n    </Form>\n  </Modal>\n);\n')),(0,a.kt)("h3",{id:"overtime"},"overtime"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"overtime")," object is returned from this hook. ",(0,a.kt)("inlineCode",{parentName:"p"},"elapsedTime")," is the elapsed time in milliseconds. It becomes ",(0,a.kt)("inlineCode",{parentName:"p"},"undefined")," when the request is completed."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"const { overtime } = useModalForm();\n\nconsole.log(overtime.elapsedTime); // undefined, 1000, 2000, 3000 4000, ...\n")),(0,a.kt)("h3",{id:"autosaveprops"},"autoSaveProps"),(0,a.kt)("p",null,"If ",(0,a.kt)("inlineCode",{parentName:"p"},"autoSave")," is enabled, this hook returns ",(0,a.kt)("inlineCode",{parentName:"p"},"autoSaveProps")," object with ",(0,a.kt)("inlineCode",{parentName:"p"},"data"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"error"),", and ",(0,a.kt)("inlineCode",{parentName:"p"},"status")," properties from mutation."),(0,a.kt)("h2",{id:"faq"},"FAQ"),(0,a.kt)("h3",{id:"how-can-i-change-the-form-data-before-submitting-it-to-the-api"},"How can I change the form data before submitting it to the API?"),(0,a.kt)("p",null,"Here is an example where we modify the form data before submit:"),(0,a.kt)("p",null,"We need to send the values we received from the user in two separate inputs, ",(0,a.kt)("inlineCode",{parentName:"p"},"name")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"surname"),", to the API as ",(0,a.kt)("inlineCode",{parentName:"p"},"fullName"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="pages/user/create.tsx"',title:'"pages/user/create.tsx"'},'import { Modal, useModalForm } from "@refinedev/antd";\nimport { Form, Input } from "antd";\nimport React from "react";\n\nexport const UserCreate: React.FC = () => {\n  // highlight-start\n  const { formProps, modalProps } = useModalForm({\n    action: "create",\n  });\n  // highlight-end\n\n  // highlight-start\n  const handleOnFinish = (values) => {\n    formProps.onFinish?.({\n      fullName: `${values.name} ${values.surname}`,\n    });\n  };\n  // highlight-end\n\n  return (\n    <Modal {...modalProps}>\n      // highlight-next-line\n      <Form {...formProps} onFinish={handleOnFinish} layout="vertical">\n        <Form.Item label="Name" name="name">\n          <Input />\n        </Form.Item>\n        <Form.Item label="Surname" name="surname">\n          <Input />\n        </Form.Item>\n      </Form>\n    </Modal>\n  );\n};\n')),(0,a.kt)("h2",{id:"api-reference"},"API Reference"),(0,a.kt)("h3",{id:"properties-1"},"Properties"),(0,a.kt)(f,{module:"@refinedev/antd/useModalForm",mdxType:"PropsTable"}),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},(0,a.kt)("inlineCode",{parentName:"p"},"*"),": These props have default values in ",(0,a.kt)("inlineCode",{parentName:"p"},"RefineContext")," and can also be set on ",(0,a.kt)("strong",{parentName:"p"},"<",(0,a.kt)("a",{parentName:"strong",href:"/docs/core/refine-component"},"Refine"),">")," component. ",(0,a.kt)("inlineCode",{parentName:"p"},"useModalForm")," will use what is passed to ",(0,a.kt)("inlineCode",{parentName:"p"},"<Refine>")," as default but a local value will override it.")),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},(0,a.kt)("inlineCode",{parentName:"p"},"**"),": If not explicitly configured, default value of ",(0,a.kt)("inlineCode",{parentName:"p"},"redirect")," depends on which ",(0,a.kt)("inlineCode",{parentName:"p"},"action")," used. If ",(0,a.kt)("inlineCode",{parentName:"p"},"action")," is ",(0,a.kt)("inlineCode",{parentName:"p"},"create"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"redirect"),"s default value is ",(0,a.kt)("inlineCode",{parentName:"p"},"edit")," (created resources edit page). If ",(0,a.kt)("inlineCode",{parentName:"p"},"action")," is ",(0,a.kt)("inlineCode",{parentName:"p"},"edit")," instead, ",(0,a.kt)("inlineCode",{parentName:"p"},"redirect"),"s default value is ",(0,a.kt)("inlineCode",{parentName:"p"},"list"),".")),(0,a.kt)("h3",{id:"type-parameters"},"Type Parameters"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Property"),(0,a.kt)("th",{parentName:"tr",align:null},"Description"),(0,a.kt)("th",{parentName:"tr",align:null},"Type"),(0,a.kt)("th",{parentName:"tr",align:null},"Default"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"TQueryFnData"),(0,a.kt)("td",{parentName:"tr",align:null},"Result data returned by the query function. Extends ",(0,a.kt)("a",{parentName:"td",href:"/docs/core/interface-references#baserecord"},(0,a.kt)("inlineCode",{parentName:"a"},"BaseRecord"))),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"/docs/core/interface-references#baserecord"},(0,a.kt)("inlineCode",{parentName:"a"},"BaseRecord"))),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"/docs/core/interface-references#baserecord"},(0,a.kt)("inlineCode",{parentName:"a"},"BaseRecord")))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"TError"),(0,a.kt)("td",{parentName:"tr",align:null},"Custom error object that extends ",(0,a.kt)("a",{parentName:"td",href:"/docs/core/interface-references#httperror"},(0,a.kt)("inlineCode",{parentName:"a"},"HttpError"))),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"/docs/core/interface-references#httperror"},(0,a.kt)("inlineCode",{parentName:"a"},"HttpError"))),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"/docs/core/interface-references#httperror"},(0,a.kt)("inlineCode",{parentName:"a"},"HttpError")))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"TVariables"),(0,a.kt)("td",{parentName:"tr",align:null},"Values for params."),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"{}")),(0,a.kt)("td",{parentName:"tr",align:null})),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"TData"),(0,a.kt)("td",{parentName:"tr",align:null},"Result data returned by the ",(0,a.kt)("inlineCode",{parentName:"td"},"select")," function. Extends ",(0,a.kt)("a",{parentName:"td",href:"/docs/core/interface-references#baserecord"},(0,a.kt)("inlineCode",{parentName:"a"},"BaseRecord")),". If not specified, the value of ",(0,a.kt)("inlineCode",{parentName:"td"},"TQueryFnData")," will be used as the default value."),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"/docs/core/interface-references#baserecord"},(0,a.kt)("inlineCode",{parentName:"a"},"BaseRecord"))),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"TQueryFnData"))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"TResponse"),(0,a.kt)("td",{parentName:"tr",align:null},"Result data returned by the mutation function. Extends ",(0,a.kt)("a",{parentName:"td",href:"/docs/core/interface-references#baserecord"},(0,a.kt)("inlineCode",{parentName:"a"},"BaseRecord")),". If not specified, the value of ",(0,a.kt)("inlineCode",{parentName:"td"},"TData")," will be used as the default value."),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"/docs/core/interface-references#baserecord"},(0,a.kt)("inlineCode",{parentName:"a"},"BaseRecord"))),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"TData"))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"TResponseError"),(0,a.kt)("td",{parentName:"tr",align:null},"Custom error object that extends ",(0,a.kt)("a",{parentName:"td",href:"/docs/core/interface-references#httperror"},(0,a.kt)("inlineCode",{parentName:"a"},"HttpError")),". If not specified, the value of ",(0,a.kt)("inlineCode",{parentName:"td"},"TError")," will be used as the default value."),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"/docs/core/interface-references#httperror"},(0,a.kt)("inlineCode",{parentName:"a"},"HttpError"))),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"TError"))))),(0,a.kt)("h3",{id:"return-value"},"Return Value"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Key"),(0,a.kt)("th",{parentName:"tr",align:null},"Description"),(0,a.kt)("th",{parentName:"tr",align:null},"Type"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"show"),(0,a.kt)("td",{parentName:"tr",align:null},"A function that can open the modal"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"(id?: BaseKey) => void"))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"formProps"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"/docs/ui-integrations/ant-design/hooks/use-modal-form#formprops"},"Props needed to manage form component")),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"https://ant.design/components/form/#Form"},(0,a.kt)("inlineCode",{parentName:"a"},"FormProps")))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"modalProps"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"/docs/ui-integrations/ant-design/hooks/use-modal-form#modalprops"},"Props for needed to manage modal component")),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"https://ant.design/components/modal/#API"},(0,a.kt)("inlineCode",{parentName:"a"},"ModalProps")))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"formLoading"),(0,a.kt)("td",{parentName:"tr",align:null},"Loading status of form"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"boolean"))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"submit"),(0,a.kt)("td",{parentName:"tr",align:null},"Submit method, the parameter is the value of the form fields"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"() => void"))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"open"),(0,a.kt)("td",{parentName:"tr",align:null},"Whether the modal dialog is open or not"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"boolean"))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"close"),(0,a.kt)("td",{parentName:"tr",align:null},"Specify a function that can close the modal"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"() => void"))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"defaultFormValuesLoading"),(0,a.kt)("td",{parentName:"tr",align:null},"DefaultFormValues loading status of form"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"boolean"))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"form"),(0,a.kt)("td",{parentName:"tr",align:null},"Ant Design form instance"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"https://ant.design/components/form/#FormInstance"},(0,a.kt)("inlineCode",{parentName:"a"},"FormInstance<TVariables>")))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"id"),(0,a.kt)("td",{parentName:"tr",align:null},"Record id for edit action"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"/docs/core/interface-references#basekey"},(0,a.kt)("inlineCode",{parentName:"a"},"BaseKey"))," ","|"," ",(0,a.kt)("inlineCode",{parentName:"td"},"undefined"))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"setId"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"id")," setter"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"Dispatch<SetStateAction<")," ",(0,a.kt)("a",{parentName:"td",href:"/docs/core/interface-references#basekey"},(0,a.kt)("inlineCode",{parentName:"a"},"BaseKey"))," ","|"," ",(0,a.kt)("inlineCode",{parentName:"td"},"undefined>>"))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"queryResult"),(0,a.kt)("td",{parentName:"tr",align:null},"Result of the query of a record"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"https://react-query.tanstack.com/reference/useQuery"},(0,a.kt)("inlineCode",{parentName:"a"},"QueryObserverResult<{ data: TData }>")))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"mutationResult"),(0,a.kt)("td",{parentName:"tr",align:null},"Result of the mutation triggered by submitting the form"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"https://react-query.tanstack.com/reference/useMutation"},(0,a.kt)("inlineCode",{parentName:"a"},"UseMutationResult<{ data: TData }, TError, { resource: string; values: TVariables; }, unknown>")))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"overtime"),(0,a.kt)("td",{parentName:"tr",align:null},"Overtime loading props"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"{ elapsedTime?: number }"))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"autoSaveProps"),(0,a.kt)("td",{parentName:"tr",align:null},"Auto save props"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"{ data: UpdateResponse<TData>")," ","|"," ",(0,a.kt)("inlineCode",{parentName:"td"},"undefined, error: HttpError")," ","|"," ",(0,a.kt)("inlineCode",{parentName:"td"},'null, status: "loading"')," ","|"," ",(0,a.kt)("inlineCode",{parentName:"td"},'"error"')," ","|"," ",(0,a.kt)("inlineCode",{parentName:"td"},'"idle"')," ","|"," ",(0,a.kt)("inlineCode",{parentName:"td"},'"success" }'))))),(0,a.kt)("h2",{id:"example"},"Example"),(0,a.kt)(N,{path:"form-antd-use-modal-form",mdxType:"CodeSandboxExample"}))}b.isMDXComponent=!0}}]);